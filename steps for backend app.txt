those steps to creating our backend 
Create Backend
05:50:20 Create User Authentication feature
06:22:20 Create Product upload feature
07:08:44 Create authentication for Admin
07:24:23 Create Admin dashboard
08:01:55 Connect Backend APIs with Admin panel
09:24:00 Connect Backend APIs with eCommerce Website
10:32:55 Create Place Order feature
11:37:02 Display order details in Admin panel
13:21:15 Deploy Full Stack project on Verce
STEP1////////////////////////CREATE AND STEUP THE BACKEND////////////////////////////////////////////////////
we will Create  a new Folder Inside the app with the name backend

 *1 we will right click on the backend folder and selcet the open in integrated terminal
 *2 in the right side of the terminal there is 2 terminal one for front end and 2 for backend
 *3 in the backend folder we will create a new file with the name server.js
 *4 now in the terminal we will add (npm init ) and pass enter for the package name
 *5 and another enter for verson and description 
 *6 here we will take the server.js as entry point so we will press enter
 *7 then enter for all the things 
 *8 after all the enter now we have a package.jason file 
 9 --------------------------------------------------------------------
in the package file we wil remove this from the script 
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1", delete this 
 -------------------------------------------------------------------------
 10 now we will install the packages that is (npm i cors dotenv express jsonwebtoken mongoose multer nodemon razorpay stripe validator imagekit bcrypt)
   example for what those package  -----------------------------
   1* i cors : this allowed the frontend api connect to the backend
   2* dotenv : using this we can use our invorment vairable in this [project]
   3* express : we can by use the express create the apiS
   4* jsonwebtoken : we can enable the user atuhentication that can the user log in in our website
   5* mongoose : we will manage our data base acitivy by using mongoose 
   6* multer : that will allow us to store the imgs in the imagekit or cloudinary storge
   7* nodemon : that will restart the backend when ever we change a code
   8* razorpay and stripe : to install the online payment for thoose app 
   9* validator :  using the validator we wil check if the data that is coming from the user it is valid or not
   10 * bcrypt : we can incript the user password and store in our data base
   11 * imageKit : to store the photos but this not working now in lebanon we will replace it by imageKit perfectly work
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
STEP2/////////////////////CREATING THE FOLDERS/////////////////////////////////////////////////////////////////////////////////////////////////////////
  1* we will create a folder inside the backend folder with the name (config) in this folder we will store all the configartion
  2* and we will create another folder with the name (middleware) in this folder we will store all the  backend middleware 
  3* we will create another folder with the name (models) we will store the mongoos schema
  4* we will create another folder with the name(controllers) we will manage all the logic of our backend 
  5* we will create another folder with the name(routes) in this routes folder will manage the server of express routes
  6* then we will open the package.json then-------------------------
   "scripts": {
    "start": "node server.js",
    "server":"nodemon server.js " // we add the server that whenever i type npm run server will be run and whenever the code changing will restarted 
  },
  -----------------------------------------------------------------------------
  7* then we will add here ---------------------------------
     {
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "license": "ISC",
  "author": "",
  "main": "server.js",
  "type" : "module", // here we add this module this for the import files 
-----------------------------------------------------------------------------------------
STEP3/////////////////////////CREATE THE SERVER////////////////////////////////////////////////////////
     1* we will create inside the backend a file with the name (.env) inside the env we can  store the secret key or apiS keys 
     2*  open server.js then we will create a server------------------------------------------------------------
     -----------------------------------------------------------------------------
import express from 'express'// we can by use the express create the apiS
import cors from 'cors' //  this allowed the frontend api connect to the backend
import 'dotenv/config'  //using this we can use our invorment vairable in this [project] and we mport config to get help from config

// -------APP Config ----------
const app = express()
const port = process.env.PORT || 4000 // here we create the local hist PORT 

// --------middlewares------
app.use(express.json()) // any request it will pass by using json
app.use(cors()) // by using this we can acsses the backend by using any apis

// -------api endpoints---------

app.get('/',(req,res)=>{
 res.send("API Working") // when ever i type npm run server it will print API WORKING
})

app.listen(port,()=>console.log('Server start On PORT : ' + port ))// to start the express server
----------------------------------------------------------------------------------------------------------------
  3* and like this we create the local host server and then we will type in the terminal npm run server
  4* then we will search for the localhost:4200 or the name of the PORT 
  5* now we will install an extentetion from the vs code by the name (thunder client ) tp test the API
  6* now we will open the (thunder cleint) and select new request and we will put our localhost link and click on send
  7* if the api working show after the send and show me the size and ms so the express server working perfectly

STEP4/////////////////////////SETUP THE MONGO DB////////////////////////////////////////////////////////
  1* Now we will add the configartion fot the data base connectivity 
  2* we will search for mongo db atlas and open the website
  3* then scroll down and click on the try free 
  4* then sign up in any email that u have then we will select the free 520 G 
  5* then we will select the project and select a new project then we will add a name for the project
  6* then create project 
  7* then we will create a cluster by clicking on create cluster 
  8* we will select the storage free and we will select the AWS for the best provider
  9* then after the deployment we will create the data base user and password 
  10* the user is :mouhamadrzak and the password is :  mouhamad12345
  11* then we will select the choose connection and choose driver and node.js 
  12* then we will copy the String like this (mongodb+srv://mouhamadrzak:mouhamad12345@cluster0.d7hc8.mongodb.net) 
  13* then we will paste the link by using var in the file(.env) like this -------------------------------------
  ------------------------------------------------------------------------------------
  MONGO_URI = "mongodb+srv://mouhamadrzak:mouhamad12345@cluster0.d7hc8.mongodb.net"
  -------------------------------------------------------------------------------------
  14* now we can connect the mongos package with the mongo db 
  15* now in the web browser we will close the page on the close button and we will open the (Networkk Accses)
  16* then we will select on (ADD IP ADRESS ) and select the (allow acsses from any where) then confirm
  17* now we can acsses the data base from any ip adress and now we finish and close the mongo db page 

STEP5///////////////////////////////ADD THE MONGO DB IN THE OUR SERVER//////////////////////////////////////////////////////////////////////////////////////////
  1* now inside the config folder we will create a new file with the name :  (mongodb.js) 
  2* now we will work inside the file like this ------------------------------------------------------------
--------------------------------------------------------------------------------------------------
  import mongoose from "mongoose";

const connectDB = async() =>{
    
mongoose.connection.on('connected',()=>{
    console.log("DB Connected");
    
})
await mongoose.connect(`${process.env.MONGO_URI}/dadobyaptest`)

}

export default connectDB;
--------------------------------------------------------------------------------------------------------------
  3* now we will open server.js file and we will do this -------------------------------------------------------------------
  ----------------------------------------------------------
  import connectDB from "./config/mongodb.js"; //wala ela bekol error


// -------APP Config ----------
const app = express()
const port = process.env.PORT || 4200 // here we create the local hist PORT 
connectDB() // we import this
------------------------------------------------------------------------------------------------------------------------
STEP6/////////////////SETUP THE UPLOAD FEATURE APP ///////////////////////////////////////////////////////////////////////////////////
  1* Now we will create inside the config folder a New file With The Name(imagekit.js) to get the photo from the fronend
  2* Now We will Search for the (imagekit) anf sign up and we will scroll down to develpoer option the cloudinary is better other don't work now but we still use the imagekit
  3* then we will create a new apis key and copy the [private and public apis and end point and paste it in (.env file)]
  4* now we will open the .env and add this ---------------------------------------------------------------------------------------
----------------------------------------------
IMAGEKIT_PUBLIC_KEY= 0YcuP0uYgob5UvssusX3k7aR7BM
IMAGEKIT_PRIVATE_KEY= 6EzaDTj1z09IwbbRaZxWjfjPWO4
IMAGEKIT_URL_ENDPOINT=https://ik.imagekit.io/plwdmd492
--------------------------------------------------------------------------------------------------------------------------------------------
  5* now we will open the imagekit file and do this ---------------
  --------------------------------------------------
  import ImageKit from "imagekit";
import dotenv from "dotenv";

dotenv.config(); // Load environment variables

// ✅ Correct way to initialize ImageKit
const imagekit = new ImageKit({
  publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
  privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
  urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT
});

export default imagekit;
--------------------------------------------------------------------------------------------
 6* then we will open the server and import  this for the app config --------
 -----------------------------------------------------------------
 // -------APP Config ----------
const app = express()
const port = process.env.PORT || 4200 // here we create the local hist PORT 
connectDB() // we import this 

// Log ImageKit config (to check if it's working)
console.log("ImageKit Config:", imagekit); // because the image kit not a function 
-------------------------------------------------------------------------------------
STEP7//////////////CREATE THE DATA BASE MODEL OF OUR PRODUCT TO STORE IT IN MONGO DB DATA BASE///////////////////////////////////////////////////////
    1* now we will create the mongoose model using that we can store the data in the data base
    2* create a new file insdie(models folder) with the name (productModel.js)
    3* inside the file we will createt this --------------
    -------------------------------------------------------------------------------
import mongoose from "mongoose";
// we import the product data from frontend to store it in the data base 
const productSchema = new mongoose.Schema({
    name: {type : String, required : true},
    description: { type : String , required : true},
    price: {type : Number , required : true},
    image: {type : Array ,  required : true},
    category: {type : String , required : true},
    subCategory: { type : String , required : true},
    sizes: {type : Array , required : true},
    bestseller: { type : Boolean},
    date: { type : Number , required  :true},
    
})
// this or operatior  when the product models is already available than that model will be used the(mongoose.models.product) and if its not available it will create a new model using this schema( mongoose.model("product",productSchema))
const productModel = mongoose.models.product || mongoose.model("product",productSchema) // we store the product schema in the product model whenever we will
                                                              // run this projuct then the model will be created multiples times and we can create the model only once 
                        
export default productModel
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
STEP8/////////////////CREATE THE MODEL OF OUR USER TO STORE IT IN OUR DATA BASE////////////////////////////////////////////////
     1* now we will create the models for the user to store the user data in the data base
     2* create a new file inside the model folder with the name (userModel.js)
     3* then we will work on the usermodel like this ------------------------
     ----------------------------------------------------
     import mongoose from "mongoose";

const userSchema = new mongoose.Schema(
    {
         name: { type : String , required : true},
         email: { type : String , required : true, unique : true},/* if we jave created the account using one email id and trying to create another account with that same
         email id then it will not create the another account in that case we will provide an error message that this email id is already use in another account */
         password: { type : String , required : true},
         cartData: { type: Object , default : {}}, // whenever the new user will be created there cart will be one emty object
    },
{
    minimize:false 
    /* 🔹 Default behavior (minimize: true)
👉 MongoDB removes cartData if it's an empty object {}.

🔹 With minimize: false
👉 MongoDB keeps cartData: {} even if it's empty. */ 
}
)
// now create the model using this schema

 const userModel = mongoose.models.user || mongoose.model('user',userSchema);

 export default userModel
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 STEP9////////////////////CREATE OUR USER FOLDERS AND THE APIs of TO THE USERS///////////////////////////////////////////////////////
    
     1* now in the contorller folder we will create a new file with the name (userController.js)
     2* in this user controller we will add the logic using that we can allow user to create an account or login in the website 
     3* now inside the userController file  -------------------------------------------------
     -------------------------------------------------------------------------
     

// route for User Login 
const LoginUser = async (req,res) =>{  // request and response

}

// Route For User Register
const registerUser = async(req,res) =>{

}

// Route for admin Login

const adminLogin = async(req,res) => {

}


export {LoginUser,registerUser,adminLogin}
------------------------------------------------------------------------------------------------------------------------
    4* now we will create the routes for this userController in the route folder
    5* create a new file inside the Routes folder with the name(userRoute.js)
    6* then we will do this inside the file ---------------------------------------------
    ------------------------------------------
    import express from 'express';
import {LoginUser,registerUser,adminLogin} from '../controllers/userController.js';

const userRouter = express.Router(); // this will create one user router and using this router we will get and post method
                 // this is the path / register
userRouter.post('/register',registerUser) // whenever is post we will call register user
userRouter.post('/login',LoginUser) 
userRouter.post('/admin',adminLogin) 



export default userRouter;
---------------------------------------------------------------------------------------------------------
  7* now we will create the end point lets open server.js file and do this --------
  -----------------------------------------------------------------------
  // ------- API Endpoints ---------
app.use('/api/user' ,userRouter)
app.get('/', (req, res) => {
    res.send("API Working"); // When server starts, this endpoint returns a response
});

------------------------------------------------------------------------------------------------------
  8 * now we will test if this usertouer and the route that i create is work 
  9 * we will open the userController file and add this to test it 
  -------------------------------------------------------------------------------
  // Route For User Register
const registerUser = async(req,res) =>{
   res.json({msg:"Register api working"})
}

-------------------------------------------------------------------------------------
  10 * we will test on thunder client if its work 
  11 * we will open thunderclient and change the local host to -----------------
  ----------------------------------------------------------
  http://localhost:4200/api/user/register
  
  -----------------------------------------------------------
  12 * then we will select the (Post) method and click on (send request) it will show on the screeen ----------
  --------------------------------------------------------------
  {
  "msg": "Register api working"
}
 
  -------------------------------------------------------------------
  13 * no we finish setup the route and make that whenever i want to see the user or login or admin
  i will doo  http://localhost:4200/api/user/register or / login or / admin 
-----------------------------------------------------------------------------------------------------------------
 STEP10//////////////CREATE USER AUTHENTICATION FEATURE AND FIRST WE WILL CREATE THE REGISTER LOGIC////////////////////////////////////////////////////////////////////////////
     1 * Now we will add the logic so we can allow the user to create an account or login on the web page
     2 * now we will open the userController and do this ----------------------
     ------------------------------------------------------------------------------------------------------
import userModel from '../models/userModel.js'
import validator from "validator";
import bcrypt from "bcrypt"
import jwt from 'jsonwebtoken' // to create the token id


const createToken = (id) =>{
   return jwt.sign({id},)
}



// route for User Login 
const LoginUser = async (req,res) =>{  // request and response

}

// Route For User Register
const registerUser = async(req,res) =>{
   // res.json({msg:"Register api working"}) this just a test if its work 
   try{
     
    const {name,email,password} = req.body; //// Step 1: Extract data from request body and for more explain below 

     // checking for user already exist 
    const exists = await userModel.findOne({email})
      if (exists){
         return res.json({success:false,message:"User Already Exists "})
         /* userModel.findOne({ email }) is a MongoDB query using Mongoose.
            It searches the database to check if a user with the same email already exists.
            await ensures that the database query completes before moving forward. */ 
      }
     // -----------validating email format & strong password we will import the val package -----------------------
            if(!validator.isEmail(email)){
              return res.json({success:false,message:"Please enter a valid email"})
            }
           // check for the password
            if(password.lenght < 8 ){
            return res.json({success:false,message:"Please enter a Strong Passowrd "})
           }
           /* now if the email and passowrd is valid we will create the acc befor create the acc we have to hash this password
             and we will store the hashed password in the data base for that we will use the bycrypt pacckage */ 
            
            // -------------hashing user password ----------------
            const salt = await bcrypt.genSalt(10)
            const hashedPassword = await bcrypt.hash(password,salt) // that we can store the password in data base
             
            // -------create the user
            const newUser = new userModel(
               {
                 name ,
                 email,
                 password:hashedPassword
               }
               )
             // save the user in the data base
             const user = await newUser.save()  
            
             // create one token to allow the user login on the application

            const token = 
                       
   }catch(error){
    
   }
}

// Route for admin Login

const adminLogin = async(req,res) => {

}


export {LoginUser,registerUser,adminLogin}


/* explain of Breakdown:
req.body contains the data sent in the request body (typically from a form or API request).
{ name, email, password } destructures req.body,
 so instead of accessing req.body.name, req.body.email, and req.body.password separately, 
 we extract them into individual variables. */ 

 -------------------------------------------------------------------------------------------------------
  3 * now we will open the .env file and add the -------

JWT_SECRET="onlineby"

----------------------------------------------------------------------
  4* then we will complete the function here in the userController file
  ------------------------------------------------------------------
  const createToken = (id) =>{
   return jwt.sign({id},process.env.JWT_SECRET)
}

--------------------------------------------------------------------------

  5* now we complete creating user and this the final result 

  -------------------------------------------------------

import userModel from '../models/userModel.js';
import validator from "validator";
import bcrypt from "bcrypt";
import jwt from 'jsonwebtoken'; // To create the token ID

// Function to create a JWT token
const createToken = (id) => {
    return jwt.sign({ id }, process.env.JWT_SECRET);
};

// Route for User Login
const LoginUser = async (req, res) => {
    // Request and response handling for user login
};

// Route for User Registration
const registerUser = async (req, res) => {
    try {
        // Step 1: Extract data from request body
        const { name, email, password } = req.body;

        // Checking if the user already exists
        const exists = await userModel.findOne({ email });

        if (exists) {
            return res.json({ success: false, message: "User Already Exists" });
        }
        /* userModel.findOne({ email }) is a MongoDB query using Mongoose.
           It searches the database to check if a user with the same email already exists.
           await ensures that the database query completes before moving forward. */

        // Validating email format & strong password
        if (!validator.isEmail(email)) {
            return res.json({ success: false, message: "Please enter a valid email" });
        }

        // Check for password strength
        if (password.length < 8) { // Fixed 'lenght' typo to 'length'
            return res.json({ success: false, message: "Please enter a strong password" });
        }

        /* If the email and password are valid, we create the account.
           Before storing the password, we hash it using bcrypt for security. */

      
        // Hashing user password yaani ma bbayen el original password bkun 3leh hashing wbs bl bycrypt byn3mel
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt); // Store hashed password in the database

        // Creating a new user
        const newUser = new userModel({
            name,
            email,
            password: hashedPassword
        });

        // Saving the user in the database
        const user = await newUser.save();

        // Creating a token to allow the user to log in
        const token = createToken(user._id);
        // The token will be used for authentication and will be auto-generated in MongoDB

        res.json({ success: true, token });

    } catch (error) {
        console.log(error);
        res.json({ success: false, message: error.message }); 
        // Catches and logs any error that occurs
    }
};

// Route for Admin Login
const adminLogin = async (req, res) => {
    // Request and response handling for admin login
};

export { LoginUser, registerUser, adminLogin };

/* Breakdown Explanation:
   req.body contains the data sent in the request body (typically from a form or API request).
   { name, email, password } destructures req.body,
   so instead of accessing req.body.name, req.body.email, and req.body.password separately,
   we extract them into individual variables. */
-------------------------------------------------------------------------------------------
  6 * now we will check if its work or not 
  7 * open thunderclient and add the link of the host http://localhost:4200/api/user/register
  8 * then select post then in the (body ) anf (json) we will do this to test--------
  -------------------------------------------------------------------------
  {
  "name": "ONLINEBY",
  "email": "ahmadabdraza@gmail.com",
   "password":"2929929222"
}
---------------------------------------------------------------------------------
  9* and it should response like this --------------------------
  --------------------------------------------
  {
  "success": true,
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZDVlYjBiNWQyMzI4MTFmOWYzMWVjMyIsImlhdCI6MTc0MjA3MjU4N30.R0s0RefpFSqDl4zIozHox5mTNlkGEvTrxmU33ZHniAM"
}
  ---------------------------------------------------------------------
  10 * if that happen so its perfectly work now we will go to the google broswer and open mongo db on our acc
  11 * then in (overview ) we will select the browse collection 
  12 * we will zoom out screen and we can se the user is added on the mongo db server
  13 * then we will delete the unused user and let my primary user 
  14 * so we finish the register user now we will go to login user
  ===================================================================================
 STEP11 //////////CREATE THE LOGIN USER ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        1 * now we will work on LoginUser after we finish the register  ----------

//---------- Route for User Login------------
const LoginUser = async (req, res) => {
    // Request and response handling for user login
    try {
      const {email,password} = req.body;

      const user = await userModel.findOne({email}); // as same of register if i want undrstand there is explain below

      if (!user){ // if the user not available
         return res.json({ success: false, message: "User dosen't exists" });
      }
      // if the user exists then we will create a new const is match to see if the password matching by the bcrypt comparing
      const isMatch = await bcrypt.compare(password,user.password) // the (password) is the new pass from login and the (user.password) that is the already stored password i our data base
      // then if is match it will be true else it will be false

      if (isMatch) {
         const token = createToken(user._id) // iza hal login true baati new id
         res.json({success:true,token})
      }
      // if the password not matching then
      else{
         res.json({success:false,message:'Invalid creadentials '}) // or invalid password
      }

    } catch (error) {
      console.log(error);
      res.json({ success: false, message: error.message }); 
      // Catches and logs any error that occurs
    }
};

-------------------------------------------------------------------------------------------------------------------
 2* after finish the login we will check if is work!
 3* open the thunderclient and put this link (http://localhost:4200/api/user/login)
 4* select the post and we will provide in the body a wrong email id and password does not exists on the database server -----
 ----------------------------------------------------------
 {
  "email": "ahmadabdrazak12@gmail.com",
   "password":"79317403m"
}
 4* and message like this 
 {
  "success": false,
  "message": "User dosen't exists"
}
-----------------------------------------------------------
  5 * now we will check our account that we store in the database-------------------
-------------------------------------------------------------------
  {
  "email": "ahmadabdrazak121@gmail.com",
   "password":"79317403m"
}
 5* and it should show this message if its work 
 {
  "success": true,
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZDVmMGVhNzQ1NWY4OWEwMTY5ZGE1OCIsImlhdCI6MTc0MjA3NTk3Nn0.-N4-7Tqo-jjaiVV32Yq8fNwcaM77g7N7tXsEFeP5xl4"
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 6 * now we successfully finished the login user and register 

 STEP12 ///////////CREATE THE UPLOAD FEATURE AND SETUP THE APIs///////////////////////////////////////////////////////////
      
      1 * now we will create the controller for the add product mean the uplaod feuature 
      2 * we will create a new file in the controllers folder with the name(productController)
      3 * now we will work on the productController ----------------------------------
--------------------------------------------------------------------------------------------------------
      // function for add product
const addProduct = async (req, res) => {};

// function for List product
const listProducts = async (req, res) => {};

// function for removing product
const removeProduct = async (req, res) => {};

// function for single product info
const singleProduct = async (req, res) => {};

export { listProducts, addProduct, removeProduct, singleProduct };

--------------------------------------------------------------------------------------------------------
       4 * now using this function we will create the routes mean the path of those 
       5 * in the routes folder we will create a new file with the name(productRoute.js)
       6 * then we will create the route in the file like this -----------------------------------
------------------------------------------------------------------------------------------------------------------------
 import express from "express"; // use this express package to create one router
import {
  listProducts,
  addProduct,
  removeProduct,
  singleProduct,
} from "../controllers/productController.js";

const productRouter = express.Router(); // using this router we can create multiple routes

productRouter.post("/add", addProduct); // this the controller function
productRouter.post("/remove", removeProduct);
productRouter.post("/single", singleProduct);
productRouter.get("/list", listProducts);

export default productRouter;
/* ----- explain the difference between get and post method

1️⃣ GET Request (productRouter.get("/list", listProducts))
Purpose: Used to retrieve data from the server.
Example: Fetching a list of products from the database.
Does NOT change the server data—just reads and returns data.
---------------------------------------------------------------
2️⃣ POST Request (productRouter.post("/add", addProduct))
Purpose: Used to send data to the server (e.g., creating, updating, or deleting something).
Example: Adding a new product to the database.
Modifies the database
-----------------------------------------------------------------------
📌 Summary
✅ Use GET for fetching data (listProducts, singleProduct).
✅ Use POST for creating, updating, or deleting (addProduct, removeProduct).
🔄 If your singleProduct route is retrieving data, change it from POST to GET. */

------------------------------------------------------------------------------------------------------------------
      7 * we will open the server.js and add this to the endpoint --------------------------
--------------------------------------------------------------------------------------------------------
// ------- API Endpoints ---------
app.use('/api/user', userRouter);
app.use('/api/product',productRouter) // we will import the product router 

app.get("/", (req, res) => {
  res.send("API Working"); // When server starts, this endpoint returns a response
});       
             
---------------------------------------------------------------------------------------------------------------
    8 * now we finish the add routing now we will work on the controllerproduct for the upload feautrue
    9 * to add a product we will create a middleware using multer so that if we send any files as form data
        then that file will be passed using multer 
   10 * so now we will add a new file in the middleware folder with the name (multer.js)
   11 * and we will do this in the multer ---------------------
----------------------------------------------------------------------------------------------------------------------
import multer from "multer";

const storage = multer.memoryStorage(); // store files in memory to upload directly to ImageKit

/* this if i use cloudinary const storage = multer.diskStorage({  //multer.diskStorage({}) → This tells multer to store files on the server’s disk (file system).
  filename: function (req, file, callback) // --->> This function defines how uploaded files will be named.
   { 
    callback(null, file.originalname) // --->> ensures that the uploaded file keeps its original name. Example: If you upload "photo.jpg", it will be stored as "photo.jpg".
   }
})
*/
const upload = multer({storage}) // -->> This creates the upload instance, which will be used as middleware for handling file uploads.
// (storage )is passed to define where and how files are stored.
export default upload;

/* ----- explain for this ---------------
Multer is a middleware for handling file uploads in Node.js. */ 

---------------------------------------------------------------------------------------------------------------------------------
   12 * then we will back to the productRoute file and we have to use this middleware in this
   product route because on the addproduct route we have to send multiple images
   that will be passed using the multiple middleware
   13 * now we will add this for the addproduct in the productRoute file and do this -----------------------
---------------------------------------------------------------------------------------------------
     productRouter.post("/add",
  upload.fields([ // -->> this upload.fields([]) is a Multer function that allows uploading multiple files under different field names.
    { name: "image1", maxCount: 1 }, // Allows uploading 1 file for "image1"
    { name: "image2", maxCount: 1 }, // Allows uploading 1 file for "image2"
    { name: "image3", maxCount: 1 }, // Allows uploading 1 file for "image3"
    { name: "image4", maxCount: 1 }, // Allows uploading 1 file for "image4"
  ]),
  addProduct // Calls the addProduct function after images are uploaded
);
----------------------------------------------------------------------------------------------------------------------------------------------------
   14 * now we will back to product controller and work on the add product function  ----------------------
-------------------------------------------------------------------------------------------------------------------------------------
      // function for add product
const addProduct = async(req,res) => {
/* to add a product we will create a middleware using multer so that if we send any files as form data
then that file will be passed using multer 
 */
     try {
        const {name,description,price,category,subCategory,sizes,bestseller} = req.body // we request the details of those var from the body request
    
         // we check if the image 1 is available in the request if is available then we wil store it in the array 
        const image1 = req.files.image1 && req.files.image1[0] 
        const image2 = req.files.image2 && req.files.image2[0]
        const image3 = req.files.image3 && req.files.image3[0]
        const image4 = req.files.image4 && req.files.image4[0]

        console.log(name,description,price,category,subCategory,sizes,bestseller); // to check those var
        console.log(image1,image2,image3,image4)

        res.json({}) // for the thunderclient to see 

     } catch (error) {

        console.log(error)
        res.json({success:false,message:error.message})

     }
}
----------------------------------------------------------------------------------------------------------------------------------------------
lect the post and add this link (http://localhost:4200/api/product/add)    15 * now we finish the addproduct function and we will check in the postman if its work ---
    16 * we will open the postman or install it from broswer to desktop and create a new request and se
    17 * then we will open the (body ) and inside the (body ) we will select the (form) and we will select the [files] check box 
    18 * and now we will add the field that is the---
    -----------------------------------------------
     (name) and the value  test name
     (description) with value  test description
     (price) value 10
     (bestseller) value true
     (category) value Men 
     (subCategory) value Topwear
     (size) value ["M"]
     then in files 
     we should name the same name of our images like this
     image 1     choose a file i can upload any image for the 4 images
     image 2     choose a file 
     image 3     choose a file
     image 4     choose a file

     after the name and select the images we will click on send button  its should look like this in the terminal server
     -----------------------------------------------------------------------------------------------------------------------------
     test name test description 10 Men Topwear ["M"] true
{
  fieldname: 'image1',
  originalname: 'Dress_pink.jpg',
  encoding: '7bit',
  mimetype: 'image/jpeg',
  destination: 'C:\\Users\\DELL\\AppData\\Local\\Temp',
  filename: 'Dress_pink.jpg',
  path: 'C:\\Users\\DELL\\AppData\\Local\\Temp\\Dress_pink.jpg',
  size: 20769
} {
  fieldname: 'image2',
  originalname: 'Dress_gray.jpg',
  encoding: '7bit',
  mimetype: 'image/jpeg',
  destination: 'C:\\Users\\DELL\\AppData\\Local\\Temp',
  filename: 'Dress_gray.jpg',
  path: 'C:\\Users\\DELL\\AppData\\Local\\Temp\\Dress_gray.jpg',
  size: 12993
} undefined undefined // becuse i upload just 2 photos

-----------------------------------------------------------------------------------------------------------------------
STEP13/////////////////STORING THE IMAGE IN DATA BASE/////////////////////////////////////////////////////////////////////////
    1 * now we have to store this data and the images in the data base but we cannot store the image directly
    first we wanna store this image in ImageKit and from the imagekit we will get the url and we will store that url in the data base

    2 * befor that here we well add an array in productController -------------------------------------------
    ------------------------------------------------------------------------------------------------------------
import imagekit from '../config/ImageKit.js';
import multer from '../middleware/multer.js'; // Import updated multer setup

      // function for add product
const addProduct = async (req, res) => {
   /* to add a product we will create a middleware using multer so that if we send any files as form data
      then that file will be passed using multer 
   */
   try {
     // we request the details of those var from the body request
     const { name, description, price, category, subCategory, sizes, bestseller } = req.body;
 
     // we check if the images are available in the request, and if they are, we store them in variables
     const image1 = req.files.image1 && req.files.image1[0];
     const image2 = req.files.image2 && req.files.image2[0];
     const image3 = req.files.image3 && req.files.image3[0];
     const image4 = req.files.image4 && req.files.image4[0];
 
   
 
     const imageFiles = [image1, image2, image3, image4].filter((item)=> item !== undefined); // we collect all images in an array and this filter to remove undifiend and store even if 1 image in the mongo db  
     const uploadedImageUrls = []; // to store the urls after upload
 
     console.log(name, description, price, category, subCategory, sizes, bestseller); // to check those var
     console.log(imageFiles); // to check the images before uploading
     
     res.json("uploded done") // without this if wr using the postman or any app the json if the photo uploded we will not response anything so if we uploded the image and its done he will uploded done or any response that i tell for hem

     // we loop through the image array and upload them to ImageKit
     for (const file of imageFiles) {
       if (file) {
         const result = await imagekit.upload({
           file: file.buffer, // binary buffer (file saved in memory by multer)
           fileName: file.originalname, // original file name
         });
 
         uploadedImageUrls.push(result.url); // after upload we push the url in the array
       }
     }

        } catch (error) {
     console.log(error); // to debug error in the terminal
     res.status(500).json({ success: false, message: error.message }); // to respond error in thunderclient
   }
 }
 
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    3 * now we will test if this work we will go to the postman  first we will add the link(http://localhost:4200/api/product/add)
    4 * then we will select post and then we will go to the body and select the form data and add image 1 and select the file and it should display like this in json response -----------------
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
     "uploded " done
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    5*then we will open the terminal and we will the something like this -------------------
    ---------------------------------------------------------------------
    [
  {
    fieldname: 'image1',
    originalname: 'abaya3.jpg',
    encoding: '7bit',
    mimetype: 'image/jpeg',
    buffer: <Buffer ff d8 ff e1 00 bc 45 78 69 66 00 00 49 49 2a 00 08 00 00 00 06 00 12 01 03 00 01 00 00 00 01 00 00 00 1a 01 05 00 01 00 00 00 56 00 00 00 1b 01 05 00 ... 233938 more bytes>,
    size: 233988
  }
]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  6 * so now the image is perfectly uploaded done now we will open imageKit and open (media libary) and we will see that the image perfectly upload
  7* and for the url link to saving in data base we will right click on the image and we will copy the url (https://ik.imagekit.io/plwdmd492/abaya3_yfRjAPbMU.jpg?updatedAt=1744657904483) and put it on google we will see its perfectly work    

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
STEP14///////////////STORING OTHER PRODUCT DEAILS IN DATA BASE ////////////////////////////////////////////////////////////////////////////////////////

  1 * now we have to save all this data on mongo db data base  so we will add and do this in productController file -------------------------------------------------------
  ------------------------------------------------------------------------------------------------------------------------------------

import imagekit from '../config/ImageKit.js';
import multer from '../middleware/multer.js'; // Import updated multer setup
import productModel from '../models/productModel.js'  // <-- Make sure the path is correct

  // ------------function for add product----------------
const addProduct = async (req, res) => {
   /* to add a product we will create a middleware using multer so that if we send any files as form data
      then that file will be passed using multer 
   */

   try {
     // we request the details of those var from the body request
     const { name, description, price, category, subCategory, sizes, bestseller } = req.body;
 
     // we check if the images are available in the request, and if they are, we store them in variables
     const image1 = req.files.image1 && req.files.image1[0];
     const image2 = req.files.image2 && req.files.image2[0];
     const image3 = req.files.image3 && req.files.image3[0];
     const image4 = req.files.image4 && req.files.image4[0];
 

     const imageFiles = [image1, image2, image3, image4].filter((item)=> item !== undefined); // we collect all images in an array and this filter to remove undifiend and store even if 1 image in the mongo db  
     const uploadedImageUrls = []; // to store the urls after upload

     console.log(name, description, price, category, subCategory, sizes, bestseller); // to check those var
     console.log(imageFiles); // to check the images before uploading

     // we loop through the image array and upload them to ImageKit
     for (const file of imageFiles) {
       if (file) {
         const result = await imagekit.upload({
           file: file.buffer, // binary buffer (file saved in memory by multer)
           fileName: file.originalname, // original file name
         });
 
         uploadedImageUrls.push(result.url); // after upload we push the url in the array
       }
     }
 
     //we create the productdata to save the url of images and the data (names,..) in the mongodb--------------------------------------
     const productData= { 
       name,
       description,
       category,
       price : Number(price), // price in form data input well took as string so we convertet as number 
       subCategory,
       bestseller: bestseller === "true" ? true : false, // same for bestseller  because the form data will took a string we will covert the string into true or false if its true so true if not so false 
       sizes: sizes.split(","), // because we cannot send the array directly as form data so from the frontend we will send the sizes and it will be convertet as array 
       image: uploadedImageUrls, // to store the images url in the mongo db 
       date: Date.now(), // that shhould return the date of now
     };
         const product = new productModel(productData); // we put our proudct data in productmodel for mongodb 
         await product.save(); // we save the product to the database
 
// Include the success message in the response
    res.status(201).json({
      success: true,
      message: "Product added successfully!", // This message is important for the toast
      productAdded: product,
    });

   } catch (error) {
     console.log(error); // to debug error in the terminal
     res.status(500).json({ success: false, message: error.message }); // to respond error in thunderclient
   }
 }
 
--------------------------------------------------------------------------------------------------------------------------------------
  2 * now we finish the logic for saving those photo url and the data name and description and all the product info so now we will test if they working on post man
  3 * open post man and add the url of local host(http://localhost:4200/api/product/add) then select post and form data 
  4 * then we will add the variables as name  and the value
                                        description with the value
                                        sizes
                                        category
                                        subCategory
  5 * and all the data with image1 and 2 and all so then the json will response like this-----------------------------------------
  ---------------------------------------------------------------------------------------------------------
  {
    "success": true,
    "productsdone": {
        "name": "mhammad",
        "description": "bjann lproduct",
        "price": 20,
        "image": [
            "https://ik.imagekit.io/plwdmd492/Kids_PinkJacket_-UYYdyUv8.jpg",
            "https://ik.imagekit.io/plwdmd492/Dress_pink_1yC6sJhYV.jpg"
        ],
        "category": "Men",
        "subCategory": "bottomwear",
        "sizes": [
            "M"
        ],
        "bestseller": true,
        "date": 1744661313869,
        "_id": "67fd6b416d230778d4b648b0",
        "__v": 0
    }
}

------------------------------------------------------------------------------------------------------------------------------------------
  6 * so like this we know its perfectly work and to check if its save on the mongodb 
  7 * so now we will open  mongo db and click on (cluster) and then (data-service) then(browse-collection) and we will select product
  8 * and we will see the product we add and it is perfectly workk and added the product data like this ----------------
----------------------------------------------------------------------------------------------------------------
id
67fd673c2602074e02468c61
name
"mhammad"
description
"bjann lproduct"
price
20

image
Array (2)
0
"https://ik.imagekit.io/plwdmd492/Kids_PinkJacket_rbKbGwSsq.jpg"
1
"https://ik.imagekit.io/plwdmd492/Dress_pink_TkK3cRUY1.jpg"
category
"Men"
subCategory
"bottomwear"

sizes
Array (1)
0
"M"
bestseller
true
date
1744660284174
__v
0

---------------------------------------------------------------------------------------------------------------------------------------------------
   9 * now the addproduct featur is perfectly work we will continue the listProducts and the rest of function
   
STEP15//////////////////////CONTINUE THE LOGIC OF LIST PRODUCT REMOVE AND SINGLE PRODUCT/////////////////////////////////////////////////////////////////////////////////////////

  1 * now insdie productController we will work on the listProducts to show or list all the product in the data base
  2 * first we will return all those function in one array using that we can display the product in our frontend
  3* note this function after the addproduct featue function in the same file of productController and like this we will add the logic ---------------------------
------------------------------------------------------------------------------------------------------------------------------------
 

// This function is used to fetch (list) or show  all products from the MongoDB database 
const listProducts = async(req,res) => {

    try { // aham shi ltry la tekshof lerror l3ena
      
      const products = await productModel.find({}); // this to find or get all the mongodb data 
      res.json({success:true,products}); // we put products to see if its work 

    } catch (error) {
       console.log(error) 
       res.json({success:false,message:error.message});
    }

}

------------------------------------------------------------------------------------------------------------------------------------

  4 * then we will test if its work wi will open postman and put the link oflist product like this (http://localhost:4200/api/product/list) and we will select (GET)
  5 * then it will displayed all the product data in the data base like this -------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
      {
            "_id": "67fd6b416d230778d4b648b0",
            "name": "mhammad",
            "description": "bjann lproduct",
            "price": 20,
            "image": [
                "https://ik.imagekit.io/plwdmd492/Kids_PinkJacket_-UYYdyUv8.jpg",
                "https://ik.imagekit.io/plwdmd492/Dress_pink_1yC6sJhYV.jpg"
            ],
            "category": "Men",
            "subCategory": "bottomwear",
            "sizes": [
                "M"
            ],
            "bestseller": true,
            "date": 1744661313869,
            "__v": 0
        },
        {
            "_id": "67fd72d569b598eb6b74356b",
            "name": "mhammad test 2 ",
            "description": "bjann lproduct",
            "price": 20,
            "image": [
                "https://ik.imagekit.io/plwdmd492/Kids_PinkJacket_0PDSea6kL.jpg",
                "https://ik.imagekit.io/plwdmd492/Dress_pink_pVRyxQwLY.jpg"
            ],
            "category": "Men",
            "subCategory": "bottomwear",
            "sizes": [
                "M"
            ],
            "bestseller": true,
            "date": 1744663253464,
            "__v": 0
        }
    ]
}

----------------------------------------------------------------------------------------------------------------------------------------------------
6 * this logic is perfectly work now we will continue to the removeProduct feuature to remove the products like this ----------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

// function for removing product
const removeProduct = async(req,res) => {
    try {
      
      await  productModel.findByIdAndDelete(req.body.id) // so this function ecplain her self it will findby id and delete then we request from body the id to delete the product
      res.json({success:true,message:"Product Removed"});

    } catch (error) {

       console.log(error) 
       res.json({success:false,message:error.message});
       
    }
}

---------------------------------------------------------------------------------------------------------------------------------------

  7 * to test if its work we wil open postman and add a new request and select(POST)and using the api of remove like this(http://localhost:4200/api/product/remove)
  8 * then we will open the body and select the (row) then inside the json text row we will add the id of product so to delete the product we delete it by get the id like this -------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
{
    "id":"67fd72d569b598eb6b74356b"
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  9 * then it will show message like this --------------------------
----------------------------------------------
{
    "success": true,
    "message": "Product Removed"
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  10 * then we will open the mongo db and we will see the product has been removed successfully
  11 * now we will work on singleProduct feautrue to get the info of single product by using his id also like this--------------------
--------------------------------------------------------------------------------------------------------------------------------
// function for single product info
const  singleProduct = async(req,res) => {
   try {
      

    const {productId} = req.body // we will get the product id from request so we create this to type it in the request and we will get the id men khilelu
    const product = await productModel.findById(productId) // this function to get the single product id info
    res.json({success:true,product})

 } catch (error){

       console.log(error) 
       res.json({success:false,message:error.message});
   }
}
--------------------------------------------------------------------------------------------------------------------------------
  12 * then we will test if work in postman like this adding the api of single product and select the body and the raw
  13 * then we will add inside the textjson like this ------------------------
  ------------------------------------------------------------
  {
    "productId":"67fd4dc7693c2595062dbeb4"
  }
------------------------------------------------------------------------------------------------------------------------------------------
  14 * and the id that in product id we bring it from any id product in the mongo db to see the product info show and if it should diplay the info like this ---------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
{
    "success": true,
    "product": {
        "_id": "67fd4dc7693c2595062dbeb4",
        "name": "mouhammad",
        "description": "this product perfectly for use",
        "price": 20,
        "image": [
            "https://ik.imagekit.io/plwdmd492/abaya3_ceuRkETQp.jpg"
        ],
        "category": "Men",
        "subCategory": "bottom",
        "sizes": [
            "meduim"
        ],
        "bestseller": true,
        "date": 20250414,
        "__v": 0
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  15 * like this we finish all of the upload feautrue perfectlyyy 

STEP16////////////CREATE THE ADMIN AUTHENTICATION//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  1 * now we will work on the admin authentication to create the admin authentication we will open (userController.js) and we will continue but befor that now we will open the (.env) file
  2 * after that i will add the admin email and password because by using admin email and password we will do the admin authentication now we will add to the env like this ----------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ADMIN_EMAIL="admin@dado123.com"
ADMIN_PASSWORD = "dado2030"
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 3  * the  we will continue the work on the adminLogin in userController like this -----------------------------------------
-----------------------------------------------------------------------------------------

//-------------- Route for Admin Login---------------
const adminLogin = async (req, res) => {
  // Request and response handling for admin login
  try {
    const { email, password } = req.body; // hayde la ektob 3nd ljason w aamol test request in body

    if ( email === process.env.ADMIN_EMAIL && password === process.env.ADMIN_PASSWORD  ) { // iza hal email and password li rah e3mol 3laya test in json body matching the sam of env email and pass that i put so in that case create on token like this

      const token = jwt.sign(email + password, process.env.JWT_SECRET); // this is the token if the pass are matching
      res.json({ success: true, token });

    } else {
      // else if the pass not matching
      res.json({ success: false, message: "Invalid credentails" });
    }
    
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};
-----------------------------------------------------------------------------------------
  4 * now we will check if its work in the postman and we will select (POST) and add the api of admin (http://localhost:4200/api/user/admin) and we will select (body) and row and we will type like this -----------------------
------------------------------------------------------------------------------------------------------------------
{
    "email":"admin@dado123.com",
    "password":"dado2030"
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  5 * then its should display like thiss if its work -------------------------------
-------------------------------------------------------------
{
    "success": true,
    "token": "eyJhbGciOiJIUzI1NiJ9.YWRtaW5AZGFkbzEyMy5jb21kYWRvMjAzMA.ZXfZfPOZ0RZjgkN6nCwqYHBNAKyHit8Pda9ZPqcYSoY"
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 6 * so by using this token we can authentication our adminLogin so to authenticate our admin we will create one middleware 
 7 * so we will create a new file in the (middleware) folder by the name(admiAuth.js) so we will add this middleware for those API where we need the admin permission like adding product and remove and some other apis
 8 * we will work on it like this -----------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 🛡️ Middleware to protect admin routes using JWT
import jwt from 'jsonwebtoken'// Import the JWT library to verify and decode tokens

// This middleware checks if the user is an admin before allowing access
const adminAuth = async(req,res,next)=>{
    try {
      const {token}  = req.headers // 🧾 Extract the token from the request headers
      // if not token 
      if(!token){//❌ If no token is provided in the header so we will return false
        return res.json({success:false,message:"Not Athorized Login Agian"}) // we add return because wen its return it will stop here
      }
        
      const token_decode = jwt.verify(token,process.env.JWT_SECRET); // ✅ If token is provided, decode and verify it using your secret key yaene iza hada jarab yfut bi fake token men el JWT_secret
      if(token_decode !== process.env.ADMIN_EMAIL + process.env.ADMIN_PASSWORD){ // if this decode token is not matching with this string its mean the user is not authorized in that case we will generate one res
        return res.json({success:false,message:"Not Athorized Login Agian"})
      }
      next()//// ✅ continue to the protected route

    } catch (error) {
        console.log(error);
        res.json({ success: false, message: error.message });
    }
}
export default adminAuth
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  9 * now wr will add this middleware to our product route so while adding the product we have to authenticate the admin and add authenticate while removing the product 
  10 * now we will open productRoute and add this -----------------
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
import express from "express"; // use this express package to create one router
import {
  listProducts,
  addProduct,
  removeProduct,
  singleProduct,
} from "../controllers/productController.js";
import upload from "../middleware/multer.js";
import adminAuth from "../middleware/adminAuth.js";

const productRouter = express.Router(); // using this router we can create multiple routes

productRouter.post('/add',adminAuth,
  upload.fields([ // -->> this upload.fields([]) is a Multer function that allows uploading multiple files under different field names.
    { name: 'image1', maxCount: 1 }, // Allows uploading 1 file for "image1"
    { name: 'image2', maxCount: 1 }, // Allows uploading 1 file for "image2"
    { name: 'image3', maxCount: 1 },
    { name: 'image4', maxCount: 1 },
  ]),
  addProduct // Calls the addProduct function after images are uploaded
);

productRouter.post('/remove',adminAuth, removeProduct);
productRouter.post('/single', singleProduct);
productRouter.get('/list', listProducts);

export default productRouter;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
  11 * now we will test on postman and we will go to the addproduct request that have the image and productdata like name,des, the upload feautrue one
  12 * then we will send and now we will have no longer access to add or remove product only the admin it will show messag like this-------------
-------------------------------------------------------------------------------------------------------------------------------------------------------
{
    "success": false,
    "message": "Not Athorized Login Agian"
}
-------------------------------------------------------------------------------------------------------------------------------------------------------
  13 * this because we add the adminAuth to add api and remove to make it work we will copy our admin token and pastet in (Headers)
  14 we will add after (connection) the key is (token) and the value is the id of token (eyJhbGciOiJIUzI1NiJ9.YWRtaW5AZGFkbzEyMy5jb21kYWRvMjAzMA.ZXfZfPOZ0RZjgkN6nCwqYHBNAKyHit8Pda9ZPqcYSoY) then it will be work and added like this ----------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
{
    "success": true,
    "productsdone": {
        "name": "mhammad test 2 ",
        "description": "bjann lproduct",
        "price": 20,
        "image": [
            "https://ik.imagekit.io/plwdmd492/Kids_PinkJacket_DwvRMquJk.jpg",
            "https://ik.imagekit.io/plwdmd492/Dress_pink_iQ_qAuKrD.jpg"
        ],
        "category": "Men",
        "subCategory": "bottomwear",
        "sizes": [
            "M"
        ],
        "bestseller": true,
        "date": 1744676120028,
        "_id": "67fda5188cd6a06b2ca76d6b",
        "__v": 0
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  15 * now the middleware is perfectly work now what is this middleware doing when we are sending the token it will check the token and then it will check if this token are valid it will continue the process of adding or rekove product
  16 * so now we creqted the N APis using that we can build our admin panel 

STEP16/////////////SETUP THE ADMIN PANNEL /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  1 * now to build the admin pannel we will close all these by right click close all now we  will create a new folder beside the fronend and back end 
  2 * a new folder with the name (admin) 
  3 * then right click on the folder and select open in integrated terminal 
  4 * then we will add the command that (npm create vite@latest . ) with dot because am already create the folder it will installet in the directory directly
  5 * then we will select (react) then (javaScript) then (npm install)
  6 * after npm install we will see the node_moduls in the admin
  7 * and we will install another package that is (npm install axios react-router-dom react-toastify)
  8 * axios : in the axios we will make the API call 
  9 * react-router-dom : by using this we will create the Routes 
  10 * ReactToastify : by using react toastify we will display the toast notification
  11 * now we will run the project by npm run dev then we will see the local host is 5173 for the admin pannel
  12 * and 5174 for the frontend and 4200 for backend now we will fix that and explaining for this down 
  13 * now for the admin pannel we will change to 5174 and for the front end will be 5173 
  14 * now we will open in admin foler the(vite.config) and we will add this ---------
-------------------------------------------------------------------------------
export default defineConfig({
  plugins: [react()],
  server:{port:5174}
})
----------------------------------------------------------------------------------------------------------------------------------------
  15 * then we will open frontend and add in (vite.config )server:{port:5174} as same of the admin
  16 * so now if we stop the server for admin and frontend and npm run dev agian we will see the frontend on 5173 and backend on 5174 so its perfectly work
  17 * why we change the local ?Changing the frontend to run on port 5173 and the admin panel on 5174 helps you run both apps at the same time locally 
  18 * Vite's default port is 5173.Running two Vite apps (like your frontend and admin panel) needs different ports — otherwise, they clash.
  19 *  Why each part runs on its own port: this an explain --------------------------------------------------------------------------------------------------------
  ------------------------------------------------------------------------------
  Part of the project           	Runs on port                           	Why?
   
  Backend (Express)	              3000 or 5000 usually	              This is your API server. Frontend talks to it to get/send data.

  Frontend                      	5173 (default Vite)	                This is what users see — products, home, shop, etc.

  Admin Panel	                    5174 (you set this one)	            Only for admins to add/remove products, control dashboard, etc.


They Work Together, But Run Separately

  Even though they run on different ports, they communicate:
  Frontend → calls API on http://localhost:3000/products to fetch products.
  Admin Panel → calls API on http://localhost:3000/admin/add-product, etc.
  Both frontends use fetch() or axios to talk to your backend.


You can imagine it like:
  Your backend is the restaurant kitchen 🧑‍🍳

  The frontend is the customer area 🍽️

  The admin panel is the manager’s office 🧑‍💼

  Each has their own entrance (port), but they all work in the same restaurant 🍝
----------------------------------------------------------------------------------------------------------------------------------------
  20 * now we will open the admin pannel in the web browser now we will clear the default project 
  21 * open assests and remove react svg
  22 * then we will open (app.jsx ) and remove the items and type(rafce)
  23 * then we will delete (app.css) file and we will open (index.css ) and clear just the title because if we clear those 2 here  -------------------------------
  -----------------------------------------------------------------------------------------------------------------------------
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script> <!--wihtout this app.jsx dont run-->
  </body>
 note :  if we clear this the app.jsx dosent work
  -------------------------------------------------------------------------------------------------------------------------------
  24 * and open index.html and remove title 
  25 * now we will install the tailwindcss package like this first we will add (npm install tailwindcss @tailwindcss/vite)
  26 * then we will add in (vite.config) like this ----------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  server:{port:5173}
})
------------------------------------------------------------------------------------------------------------------------------------
  27 * then we will add this to the (@import "tailwindcss";) 
  28 * then we will run the project to see if its work and add this to the html to see if tailwinds work-----------------------------
---------------------------------------------------------------------------------------------------------------------
<body>
    <h1 class="text-3xl font-bold underline">
      Hello world!
    </h1>
  </body>
------------------------------------------------------------------------------------------------------------------------------------
   29 * then in the src we will right click and add 2 folders one by the name of (pages) for the multiple pages and one by name of (components) for the components like nav bar and those things
   30 * now we will add the image to use it in the assests folder then we will import the imagess in new file (assets.js) ----------------------------------
   --------------------------------------------------------------------------------------------------------------------------------------
import add_icon from './add_icon.jpg' 
import  box_icon from './box_icon.jpg'
import drag_drop_icon from './drag_drop_icon.jpg'
import order_order from './order_order.jpg'

export const assets = {

    add_icon,
    box_icon,
    drag_drop_icon,
    order_order

}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   31 * now we almost finished the setup of admin 

STEP17///////////////////CREATE THE DASHBOARD OF THE ADMIN///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
  1 * now if we we finish settup the admin and we will work on the UI of the admin mean creating the admin dashboard
  2 * and of course of we want to work we will  run all the local host of front end and admin and backend 
  3 * now inside the pages folder we will create three files that is (Add.jsx) and (List.jsx) and (Orders.jsx)
  4 * now we will add this three files into the app.jsx but we will route those file so for this we will use reacts-router-dom 
  5 * to use the reactRTD we will open the (Main.jsx) and we will add the <BrowserRouter> to get the support by reactRTD ---------
----------------------------------------------------------------------------------------------------------------------------------------
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'
import { BrowserRouter } from 'react-router-dom'

createRoot(document.getElementById('root')).render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
)

//we will remove the StrictMode 

  4 * then before we routing the add,list.order we will create Navbar file inside the (compnents) then we will work on the file like this---------
------------------------------------------------------------------------------------------------------------------
import React from 'react'
import {assets} from '../assets/assets'
const Navbar = () => {
  return (
    <div>
       <img src={assets.logo_dado} alt="" /> 
       <button>Logout</button>
    </div>
  )
}

export default Navbar
------------------------------------------------------------------------------------------------------------------
  5 * then we will add the navbar into the.app jsx like this--------------
-----------------------------------------------------------------
import Navbar from './components/Navbar';

const App = () => {
  return (
    <>
     
     <Navbar/>
     
    </>
  );
};

export default App;
-----------------------------------------------------------------------------------------------------
  6 * then we will continue work on navbar files like this ---------------------------------------------
----------------------------------------------------------------
import React from 'react'
import {assets} from '../assets/assets'
const Navbar = () => {
  return (
    <div className='flex items-center py-2 justify-between'>
        
       <img className='w-[max(10%,80px)]' src={assets.logo_dado} alt="" /> 
       <button className= 'bg-gray-600 text-white px-5 py-2 sm:px-7 sm:py-2 rounded-full sm:text-sm  '>Logout</button>
       
    </div>
  )
}

export default Navbar
--------------------------------------------------------------------------------------------------------------------------------
  7 * now we will create the side bar and for the side bar we will create a new file in the compnents with the name(Sidebar.jsx)
  8 * then we will add the sidebar in the app.jsx and we will make some edit on app.jsx---------------------------------------------------
-------------------------------------------------------------------------------------------
import Navbar from './components/Navbar';
import Sidebar from './components/Sidebar';

const App = () => {
  return (
    <div className='bg-gray-50 min-h-screen'>
     
     <>
     <Navbar/>
     <hr/>
     <div className='flex w-full'>
        <Sidebar/>
     </div>
     </>
     
    </div>
  );
};

export default App;
-----------------------------------------------------------------------------------------------------------------------------
  9 * then we will work on the sidebar files like this ------------------------
-------------------------------------------------------
import React from 'react'
import { NavLink } from 'react-router-dom'
import {assets} from '../assets/assets'
const Sidebar = () => {
  return (
    <div className='w-[18%] min-h-screen border-r-2'> {/* this is border right 2 */ }
        <div className='flex flex-col gap-4 pt-6 pl-[20%] text-[15px]'>

            <NavLink className='flex items-center gap-3 border border-gray-300 border-r-0 px-3 py-3 rounded-2xl' to="/add"> {/* if anyone click on this it will take them to /add page*/ }
               <img className='w-5 h-5' src={assets.add_icon} alt="" />
               <p className='hidden md:block '>Add Items</p>
            </NavLink>

            <NavLink className='flex items-center gap-3 border border-gray-300 border-r-0 px-3 py-3 rounded-2xl' to="/list"> {/* if anyone click on this it will take them to the /list page*/ }
               <img className='w-5 h-5' src={assets.order_order} alt="" />
               <p className='hidden md:block'>List Items</p>
            </NavLink>

            <NavLink className='flex items-center gap-3 border border-gray-300 border-r-0 px-3 py-3 rounded-2xl' to="/orders"> {/* if anyone click on this it will take them to /orders page*/ }
               <img className='w-5 h-5' src={assets.order_order} alt="" />
               <p className='hidden md:block'>Orders </p>
            </NavLink>

        </div>
    </div>
  )
}

export default Sidebar
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 10 * now we will add the logic that if i click on add items or list items or orders it will be highlightet and to add rhis logic we will do this in index.css like this --------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
.active{
    background-color:#ffebf5 ;
    border-color:#c586A5;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  11 * now we will see even if we refresh it will highiletet on click to those color 
  12 * now we will add the support of the custom font in our project for that we will open the search google and search for (outfit font) and open the Website
  13 * then we will double click on (get font) then we will click on (get embed code) and then click on (import) and copy the code then linked in index.css in the Top
  14 * then we will ad the outfit familiy for all our css eleement like this -----
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
*{
    font-family:Outfit;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  15 * now we will setup the routing in the (app.jsx) that when i click on the add or orders or list it wil take me to the page like this ------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import { Route, Routes } from 'react-router-dom'; // we import those to setup the routing
import Navbar from './components/Navbar';
import Sidebar from './components/Sidebar';
import Add from './pages/Add'
import List from './pages/List'
import Orders from './pages/Orders'
const App = () => {
  return (
    <div className='bg-gray-50 min-h-screen'>
     <>
     <Navbar/>
     <hr/>
     <div className='flex w-full'>
        <Sidebar/>

        <div className='w-[70%] mx-auto ml-[max(5vwh,25px)] my-8 text-gray-600 text-base'> 
          
        <Routes>
        <Route path='/add' element={<Add/>} /> 
        <Route path='/list' element={<List/>} /> 
        <Route path='/orders' element={<Orders/>} /> 
        </Routes>
       
        </div>
     </div>
     </>
    </div>
  );
};

export default App;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
STEP18///////////////////ADDING THE ADMIN AUTHENTICATION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  1 * create a new file inside the comnents with the name  [login.jsx] so whenever we not authenticated this login page will be displayd if we atuhenticated successfully so it will display other UI 
  2 * now we will add the logic for that in the app.jsx like this -------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import { Route, Routes } from 'react-router-dom'; // we import those to setup the routing
import Navbar from './components/Navbar';
import Sidebar from './components/Sidebar';
import Add from './pages/Add'
import List from './pages/List'
import Orders from './pages/Orders'
import { useState } from 'react';
import Login from './components/Login';

const App = () => {

  const [token,setToken] = useState("");

  return (

    <div className='bg-gray-50 min-h-screen'>
      
      {token === "" ? <Login/> /* here is the turnery how its work if token === "" emty string so return the login page else return all our page */ 
       : <> {/* here this mean (:) as (else) so  else return all our pages if the login page not equal "" */ }
     <Navbar/>
     <hr/>
     <div className='flex w-full'>
        <Sidebar/>

        <div className='w-[70%] mx-auto ml-[max(5vwh,25px)] my-8 text-gray-600 text-base'> 

        <Routes>
        <Route path='/add' element={<Add/>} /> 
        <Route path='/list' element={<List/>} /> 
        <Route path='/orders' element={<Orders/>} /> 
        </Routes>
       
        </div>
     </div>
     </> // this an empty div or fragment
} {/*here is the close of the turnerry operatior  */}
    </div>
      
  );
};

export default App;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  1 * now if we add the admin pannel we see there is just the page of admin show because "" emty string there is nothing in the use state when we type in use state (123) the admin pannel will show
  2 * now we will disane the loginPage like this ----------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import React, { useState } from 'react'

const Login = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const handleSubmit = async (e) => {
    try {
    e.preventDefault(); // mean stop refresh if we login 
    // You can now use email and password variables
   // console.log('Email:', email) to see if the email and password are save in our use state variable
   // console.log('Password:', password)
   
     // 
     } catch (error) {
        // 
  }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-pink-50">
      <div className="bg-white p-8 rounded-2xl shadow-lg w-full max-w-sm">
        <h2 className="text-2xl font-bold mb-6 text-center text-pink-600">Admin Login</h2>

        <form className="space-y-5" onSubmit={handleSubmit}>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-pink-700">Email</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)} // onchage add the value to the email
              placeholder="admin@example.com"
              className="w-full mt-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-400"
              required
            />
          </div>

          <div>
            <label htmlFor="password" className="block text-sm font-medium text-pink-700">Password</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)} // on change add the value to our usestate var
              placeholder="••••••••"
              className="w-full mt-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-400"
              required
            />
          </div>

          <button
            type="submit"
            className="w-full bg-pink-500 text-white py-2 px-4 rounded-lg hover:bg-pink-600 transition duration-300"
          >
            Login
          </button>
        </form>
      </div>
    </div>
  )
}

export default Login
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 3 * now we finish setup the UI login page and we store the email and password in our variable so we can call the API 

STEP19/////////////CONNECT BACKEND API WITH ADMIN PANNEL ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   1 * now we will right click on admin folder and add a new file with the name (.env) env mean environment variable  to store our backend URL mean the(local host of our backend)
   2 * now we will open our env file and add this -----------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
VITE_BACKEND_URL = 'http://localhost:4200'
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   3 * then we will add this url into the app.jsx and export it to can accses it from any compnents like this --------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
export const backendUrl = import.meta.env.VITE_BACKEND_URL // this how we get the env var
const App = () => {
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  4 * so we will continue to calling the APis in the login page like this ------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import axios from 'axios'
import { backendUrl } from '../App'


const Login = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const handleSubmit = async (e) => {
    try {
    e.preventDefault(); // mean stop refresh if we login 
    // You can now use email and password variables
   // console.log('Email:', email) to see if the email and password are save in our use state variable
   // console.log('Password:', password)
     const response = await axios.post(backendUrl + '/api/user/admin',{email,password}); // the last one that mean we sent the {email,password} that will be aded on request body  
     console.log(response) // to test if the token succes perfectly so we will add the same admin email and password of admin to see if its work so if its work it will will show sucsess true and the id of token

     } catch (error) {
        // 
  }
  }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   5 * now if we test in console log and console we will see its work so now the admin is authenticated but we will store the token we took in our token state that we create in our app.jsx file now we will update this in our login file
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  const handleSubmit = async (e) => {
    try {
    e.preventDefault(); // mean stop refresh if we login 
    // You can now use email and password variables
   // console.log('Email:', email) to see if the email and password are save in our use state variable
   // console.log('Password:', password)
     const response = await axios.post(backendUrl + '/api/user/admin',{email,password}); //this how we call the API and the last one that mean we sent the {email,password} that will be aded on request body  
   //  console.log(response)  to test if the token succes perfectly so we will add the same admin email and password of admin to see if its work so if its work it will will show sucsess true and the id of token
       if (response.data.success) { // if our respone succses = true so we have to save the token
         
       }
     } catch (error) {
        // 
  }
  }
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   6 * then if the response.data.sucsess true we will storet in the token var in app.jsx 
   7 * so now we have to bring the setToken from app.jsx like this we will pass it on our login page as props like this --------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
{token === "" ? <Login setToken = {setToken}/>
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   8 * then we will destructures in the login .jsx file like this mean add it in login page------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const Login = ({setToken}) => {
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   9 * then we will continue work on login and else if the token not sucsess we will ad a toast notification to add it
   10 * we will search to react toastify and we all allready insatll the package but we will add this import into to app.jsx so we can use it ---------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  import { ToastContainer } from 'react-toastify';
  import { ToastContainer} from 'react-toastify';

export const backendUrl = import.meta.env.VITE_BACKEND_URL // this how we get the env var

const App = () => {

  const [token,setToken] = useState("");

  return (

    <div className='bg-gray-50 min-h-screen'>
      <ToastContainer/> // after we importet we will add it here 
      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   11 * then we will add it into our div so now we can use toast notification like this  in our login page----------
------------------------------------------------------------------------------------------------------------------------
import React, { useState } from "react";
import axios from "axios";
import { backendUrl } from "../App";
import { toast } from "react-toastify";

const Login = ({ setToken }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    try {
      e.preventDefault(); // mean stop refresh if we login
      // You can now use email and password variables
      // console.log('Email:', email) to see if the email and password are save in our use state variable
      // console.log('Password:', password)

      const response = await axios.post(backendUrl + '/api/user/admin', {email, password,}); // this how we call the APIs and the last one that mean we sent the {email,password} that will be aded on request body
      //  console.log(response)  to test if the token succes perfectly so we will add the same admin email and password of admin to see if its work so if its work it will will show sucsess true and the id of token

      if (response.data.success) {
// if our respone succses = true so we have to save the token
        setToken(response.data.token); // add the token in the set token var
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.log(error);
      toast.error(error.message); // this the error message of toast also
    }
  };
------------------------------------------------------------------------------------------------------------------------
  12 * so now if we test it and we login into admin pannel it will work and it will store the token in our token like this  to more undrstand ----------------
------------------------------------------------------------------------------------------------------------------------
///////////////////THIS AN EXPLAIN FOR HOW THE TOKEN STORED IN OUR VAR ////////////////////////////////////////////////////////
 const [token,setToken] = useState(''); 
 here the explain so here we make an if this state change it will showing our orders and all our page 
 and if its == '' string like this is the if here in app.jsx---
  
   {token === "" ? <Login setToken = {setToken}/> 
       : <> {/* here this mean (:) as (else) // so here if its not equal to "" it will show our pages
 
 so after we storing our admin token from the back end after we call the api in the Set token so we make the set token like this--

   const [token,setToken] = useState('the id of our token'); and it is change from "" to our original token and for that its show our pages the order and list
------------------------------------------------------------------------------------------------------------------------
  13 * but now we have a problem that if we refresh the page its ask me for loggin agian we will solve this to solve this we will use the local storage for that we will add in app.jsx like this---------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const App = () => {

  const [token,setToken] = useState(localStorage.getItem('token') ? localStorage.getItem('token'):""); // here we ask if this token available in the local storage so save it in the state var that is [token,setToken] else add nothing to local storage or emty string mean only show the loggin page

 useEffect(()=> // this use effect mean if anysomthing change event will happen
  { 
    localStorage.setItem('token',token) // we adding our token to the local storage so if i close or refresh the website it will still saved on the local storage
  },

  [token] // here whenever the token will upadated so in the localstorage we will save the data of token 
)
  return (
-----------------------------------------------------------------------------------------------------------------------------------------------------
  14 * so now if we loggin and refresh it will save and i explain each one what is do but i want to explain this more by my way-----
------------------------------------------------------------------------------------------------------------------------------------------------------
      //////////////////MORE EXPLAIN HOW THE WE SAVE OUR TOKEN /////////////////////////

onst [token,setToken] = useState(localStorage.getItem('token') ? localStorage.getItem('token'):'');
first our if its if our token === "" then only show the page else if its token or somthing show the main pages

here we ask iff this localstorage saving get a ('token') mean if its having a token  so add it into our variable add it mean 
const  [token,setToken] = useState ('token') so its change from string to token so the main page will show
and else if this local storage save a string "" so only show the login page metl el shart li 3ena 
if our token === "" ? <login/> so like this working
---------------------------------------------------------------------------------------------------------------------------------------------------------------
  15 * now we have tp create the logout button to logout from the main page for that we will add the SetToken as props to the Navbar like this---
-------------------------------------------------------------------------------------------------------------------------------------------------
  <Navbar {setToken}/>
     <hr/>
     <div className='flex w-full'>
        <Sidebar/>

        <div className='w-[70%] mx-auto ml-[max(5vwh,25px)] my-8 text-gray-600 text-base'> 

        <Routes>
        <Route path='/add' element={<Add{token}/>} /> 
        <Route path='/list' element={<List{token}/>} /> 
        <Route path='/orders' element={<Orders{token}/>} /> 
        </Routes>
-------------------------------------------------------------------------------------------------------------------------------------------------
  16 * and also we add the token to add and list and orders now we will work on Navbar-----
-------------------------------------------------------------------------------------------------------------------------------------------------
import React from 'react'
import {assets} from '../assets/assets'
const Navbar = ({setToken}) => {
  return (
    <div className='flex items-center py-2 justify-between'>
        
       <img className='w-[max(10%,80px)]' src={assets.logo_dado} alt="" /> 
       <button onClick={()=>setToken('')} className= 'bg-gray-600 text-white px-5 py-2 sm:px-7 sm:py-2 rounded-full sm:text-sm  '>Logout</button>
        {/* onclick make it string so our if if its string stay in login page */}
    </div>
  )
}

export default Navbar
-------------------------------------------------------------------------------------------------------------------------------------------------
  17 * here the explain so to remember our if its token === '' ? <login/> so on click we set the token to string so it will back to login page
  18 * now we finish connect the api to login and logout of the admin pannel then we will work on add file
-------------------------------------------------------------------------------------------------------------------------------------------------
STEP20///////////////////////////CREATE THE ADD PRODUCT UI AND  API  OF ADMIN/////////////////////////////////////////////////////////////////////////////////////////////////

  1 * we will open add page and work on it
  2 * we have to add this on the index.css ---
------------------------------------------------
select,input,textarea{
    border:1px solid #c2c2c2;
    outline-color:#c586A5;
    border-radius:4px;
}
------------------------------------------------
  3 * and we will work on the UI disane of the ADD product like this ------------------
--------------------------------------------------------------------------
import React from "react";
import { assets } from "../assets/assets";
const Add = () => {
  return (
    <form>
      <div className="flex flex-col w-full items-start gap-3">
        <p className="mb-2">Upload Image</p>

        <div className="flex gap-2">

          <label htmlFor="image1">
            <img className='w-20'src={assets.drag_drop_icon} alt="" />
            <input type="file" id="image1" hidden />
          </label>

          <label htmlFor="image2">
            <img className='w-20'src={assets.drag_drop_icon} alt="" />
            <input type="file" id="image2" hidden />
          </label>

          <label htmlFor="image3">
            <img className='w-20'src={assets.drag_drop_icon} alt="" />
            <input type="file" id="image3" hidden />
          </label>

          <label htmlFor="image4">
            <img className='w-20'src={assets.drag_drop_icon} alt="" />
            <input type="file" id="image4" hidden />
          </label>

        </div>
      </div>
      
      <div className="w-full">
        <p className="mb-2 mt-3">Product name</p>
        <input className="w-full max-w-[500px] px-3 py-2" type="text" placeholder="Type here" required/>
      </div>
       
      <div className="w-full">
        <p className="mb-2 mt-3">Product description</p>
        <textarea className="w-full max-w-[500px] px-3 py-2" type="text" placeholder="Write Content Here" required/>
      </div>

      <div className="flex flex-col sm:flex-row gap-2 w-full sm:gap-8">

           <div>
            <p className="mb-2 mt-2">Product Category</p>
            <select className=" px-3 py-2">
              <option value="Men">Men</option>
              <option value="Women">Women</option>
              <option value="Kids">Kids</option>
            </select>
           </div>

           
           <div>
            <p className="mb-2 mt-2">Sub Category</p>
            <select className="px-3 py-2">
              <option value="Topwear">Topwear</option>
              <option value="Bottomwear">Bottomwear</option>
              <option value="Winterwear">Winterwear</option>
            </select>
           </div>

           <div>
            <p className="mb-2 mt-2">Product Price</p>
            <input className="w-full px-3 py-2 sm:w-[120px] " type="Number" placeholder="25$"/>
           </div>
      </div>

      <div>
        <p  className="mb-2">Product Sizes</p>
        <div className="flex gap-3">

          <div>
            <p className="bg-slate-200 px-3 py-1 cursor-pointer">S</p>
          </div>
          
          <div>
            <p className="bg-slate-200 px-3 py-1 cursor-pointer">M</p>
          </div>

          <div>
            <p className="bg-slate-200 px-3 py-1 cursor-pointer">L</p>
          </div>

          <div>
            <p className="bg-slate-200 px-3 py-1 cursor-pointer">XL</p>
          </div>

          <div>
            <p  className="bg-slate-200 px-3 py-1 cursor-pointer">XXL</p>
          </div>
          
        </div>
      </div>

      <div className="flex gap-2 mt-2">
        <input type="checkbox" id="bestseller"/>
        <label className="cursor-pointer" htmlFor="bestseller">Add to bestseller</label>
      </div>

       <button type="submit" className="w-28 py-2 mt-4 bg-black text-white ">
                 ADD
       </button>
    </form>
  );
};

export default Add;
-------------------------------------------------------------------------------------------------------------------------------------------------
  4 * so like this we finish the UI disane of Add page then we will create a state variable and in those var we will store the product data that we made in UI like this--------------
-------------------------------------------------------------------------------------------------------------------------------------------------
  const [image1,setImage1] = useState(false); // to store our images
  const [image2,setImage2] = useState(false);
  const [image3,setImage3] = useState(false);
  const [image4,setImage4] = useState(false);

  const [name, setName] = useState(""); // Store product name
  const [description, setDescription] = useState(""); // Store product description
  const [price, setPrice] = useState(""); // Store product price
  const [category, setCategory] = useState("Men"); // Store category value
  const [subCategory, setSubCategory] = useState("Topwear"); // Store subcategory value
  const [size, setSize] = useState([]); // Store selected sizes
  const [bestseller, setBestseller] = useState(false); // Store bestseller status
-------------------------------------------------------------------------------------------------------------------------------------------------
  5 * now we have to link those variable with our UI like this -----------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------

          <label htmlFor="image1">
            <img className='w-20'src={assets.drag_drop_icon} alt="" />
            <input  onChange={(e)=>setImage1(e.target.files[0])} type="file" id="image1" hidden />
          </label>

          <label htmlFor="image2">
            <img className='w-20'src={assets.drag_drop_icon} alt="" />
            <input onChange={(e)=>setImage2(e.target.files[0])} type="file" id="image2" hidden />
          </label>

          <label htmlFor="image3">
            <img className='w-20'src={assets.drag_drop_icon} alt="" />
            <input onChange={(e)=>setImage3(e.target.files[0])} type="file" id="image3" hidden />
          </label>

          <label htmlFor="image4">
            <img className='w-20'src={assets.drag_drop_icon} alt="" />
            <input onChange={(e)=>setImage4(e.target.files[0])} type="file" id="image4" hidden />
          </label>
-------------------------------------------------------------------------------------------------------------------------------------------------
   6 * now we store those images in out state var like this then we will add the logic that wen i upload an image it will replace the icon with the image that i create like this---
-------------------------------------------------------------------------------------------------------------------------------------------------
<div className="flex gap-2">

          {/* ----explian what we add for images----- first we store the image in our set var then we add that when we upload an image it will show instand of the 
          of the icon so we ask in turnery IF Not image1 so if image1 not available so add the icon else add the url of the image */ }

          <label htmlFor="image1">
            <img className='w-20'src={!image1 ? assets.drag_drop_icon : URL.createObjectURL(image1)} alt="" />
            <input  onChange={(e)=>setImage1(e.target.files[0])} type="file" id="image1" hidden />
          </label>
        
          <label htmlFor="image2">
            <img className='w-20'src={!image2 ? assets.drag_drop_icon : URL.createObjectURL(image2)} alt="" />
            <input onChange={(e)=>setImage2(e.target.files[0])} type="file" id="image2" hidden />
          </label>

          <label htmlFor="image3">
            <img className='w-20'src={!image3 ? assets.drag_drop_icon : URL.createObjectURL(image3)} alt="" />
            <input onChange={(e)=>setImage3(e.target.files[0])} type="file" id="image3" hidden />
          </label>

          <label htmlFor="image4">
            <img className='w-20'src={!image4 ? assets.drag_drop_icon : URL.createObjectURL(image4)} alt="" />
            <input onChange={(e)=>setImage4(e.target.files[0])} type="file" id="image4" hidden />
          </label>

        </div>
      </div>
-------------------------------------------------------------------------------------------------------------------------------------------------
  7 * like this we add the logic and we test in our website if we upload an image it will be displayed then we will complete the other to saving them in our var---
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import React, { useState } from "react";
import { assets } from "../assets/assets";
const Add = () => {
  const [image1,setImage1] = useState(false); // to store our images
  const [image2,setImage2] = useState(false);
  const [image3,setImage3] = useState(false);
  const [image4,setImage4] = useState(false);

  const [name, setName] = useState(""); // Store product name
  const [description, setDescription] = useState(""); // Store product description
  const [price, setPrice] = useState(""); // Store product price
  const [category, setCategory] = useState("Men"); // Store category value
  const [subCategory, setSubCategory] = useState("Topwear"); // Store subcategory value
  const [sizes, setSizes] = useState([]); // Store selected sizes
  const [bestseller, setBestseller] = useState(false); // Store bestseller status


  return (
    <form>
      <div className="flex flex-col w-full items-start gap-3">
        <p className="mb-2">Upload Image</p>

        <div className="flex gap-2">

          {/* ----explian what we add for images----- first we store the image in our set var then we add that when we upload an image it will show instand of the 
          of the icon so we ask in turnery IF Not image1 so if image1 not available so add the icon else add the url of the image */ }
          <label htmlFor="image1">
            <img className='w-20'src={!image1 ? assets.drag_drop_icon : URL.createObjectURL(image1)} alt="" />
            <input  onChange={(e)=>setImage1(e.target.files[0])} type="file" id="image1" hidden />
          </label>
        
          <label htmlFor="image2">
            <img className='w-20'src={!image2 ? assets.drag_drop_icon : URL.createObjectURL(image2)} alt="" />
            <input onChange={(e)=>setImage2(e.target.files[0])} type="file" id="image2" hidden />
          </label>

          <label htmlFor="image3">
            <img className='w-20'src={!image3 ? assets.drag_drop_icon : URL.createObjectURL(image3)} alt="" />
            <input onChange={(e)=>setImage3(e.target.files[0])} type="file" id="image3" hidden />
          </label>

          <label htmlFor="image4">
            <img className='w-20'src={!image4 ? assets.drag_drop_icon : URL.createObjectURL(image4)} alt="" />
            <input onChange={(e)=>setImage4(e.target.files[0])} type="file" id="image4" hidden />
          </label>

        </div>
      </div>
      
      <div className="w-full">
        <p className="mb-2 mt-3">Product name</p>
        <input onChange={(e)=>setName(e.target.value)} value={name} className="w-full max-w-[500px] px-3 py-2" type="text" placeholder="Type here" required/>
      </div>
       
      <div className="w-full">
        <p className="mb-2 mt-3">Product description</p>
        <textarea  onChange={(e)=>setDescription(e.target.value)} value={description} className="w-full max-w-[500px] px-3 py-2" type="text" placeholder="Write Content Here" required/>
      </div>

      <div className="flex flex-col sm:flex-row gap-2 w-full sm:gap-8">

           <div>
            <p className="mb-2 mt-2">Product Category</p>
            <select  onChange={(e)=>setCategory(e.target.value)}  className=" px-3 py-2"> {/*we add the onchange on the select kermel ma et3azab whota bi kel option so in select if i chose any value it will store it  */}
              <option value="Men">Men</option>
              <option value="Women">Women</option>
              <option value="Kids">Kids</option>
            </select>
           </div>

           
           <div>
            <p className="mb-2 mt-2">Sub Category</p>
            <select  onChange={(e)=>setSubCategory(e.target.value)} className="px-3 py-2">
              <option value="Topwear">Topwear</option>
              <option value="Bottomwear">Bottomwear</option>
              <option value="Winterwear">Winterwear</option>
            </select>
           </div>

           <div>
            <p className="mb-2 mt-2">Product Price</p>
            <input onChange={(e)=>setPrice(e.target.value)} value={price} className="w-full px-3 py-2 sm:w-[120px] " type="Number" placeholder="25$"/>
           </div>
      </div>

      <div>
  <p className="mb-2">Product Sizes</p>
  <div className="flex gap-3">

    <div onClick={() => setSizes(prev => prev.includes("S") ? prev.filter(item => item !== "S") : [...prev, "S"])}>
{/* State Update Logic:
If the size is already in the sizes array (using prev.includes("size")), we remove it using prev.filter().
If the size is not in the sizes array, we add it by spreading the prev array and appending the new size (...prev, "size"). */}
      <p className={` ${sizes.includes('S') ? "bg-pink-100" : "bg-slate-200"} px-3 py-1 cursor-pointer`}>S</p> {/*we do this because when we click nothing show now we ask if this sizes include S so make the color pink else make it normal*/}
    </div>

    <div onClick={() => setSizes(prev => prev.includes("M") ? prev.filter(item => item !== "M") : [...prev, "M"])}>
      <p className={` ${sizes.includes('M') ? "bg-pink-100" : "bg-slate-200"} px-3 py-1 cursor-pointer`}>M</p>
    </div>

    <div onClick={() => setSizes(prev => prev.includes("L") ? prev.filter(item => item !== "L") : [...prev, "L"])}>
      <p className={` ${sizes.includes('L') ? "bg-pink-100" : "bg-slate-200"} px-3 py-1 cursor-pointer`}>L</p>
    </div>

    <div onClick={() => setSizes(prev => prev.includes("XL") ? prev.filter(item => item !== "XL") : [...prev, "XL"])}>
      <p className={` ${sizes.includes('XL') ? "bg-pink-100" : "bg-slate-200"} px-3 py-1 cursor-pointer`}>XL</p>
    </div>

    <div onClick={() => setSizes(prev => prev.includes("XXL") ? prev.filter(item => item !== "XXL") : [...prev, "XXL"])}>
      <p className={` ${sizes.includes('XXL') ? "bg-pink-100" : "bg-slate-200"} px-3 py-1 cursor-pointer`}>XXL</p>
    </div>

  </div>
</div>


      <div className="flex gap-2 mt-2">
        <input onChange={()=> setBestseller(prev => !prev)} checked={bestseller} type="checkbox" id="bestseller"/> {/* here how is work The prev here represents the current value of bestseller before it gets updated. */}
        <label className="cursor-pointer" htmlFor="bestseller">Add to bestseller</label>                            {/** so If prev is true, !prev becomes false. */}
      </div>                                                                                        {/*and If prev is false, !prev becomes true. */}
                                                                                                                       
       <button type="submit" className="w-28 py-2 mt-4 bg-black text-white ">
                 ADD
       </button>
    </form>
  );
};

export default Add;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  8 * now we finish storing our data in the var we create and i explain each one what its do beside the code to more undrstand
  9 * now we will add the submithandler function to our form to when i add it the function will be excuted ---------------------------------
-----------------------------------------------------------------------------------------------------------------------\
const onSubmitHandler = async (e) =>{
         e.preventDefault(); // if we submit our form page will not be realoded

         try {
          const formData = new FormData(); // Correct // creating one form data having all the data we have then send it into HTTPS request
            
         // Append the images
      image1 && formData.append("image1", image1); // here we add && because if i select one image i dont want the rest of images send so here we ask if image 1 available so send it also for the rest images
      image2 && formData.append("image2", image2); // what append mean ? Append the data to formData so it can be sent via an HTTP request (typically to a backend server) when we used in postman add those to test after we add them we send via request so append mean send the via request directly 
      image3 && formData.append("image3", image3);
      image4 && formData.append("image4", image4);

      // Append text fields
      formData.append("name", name);
      formData.append("description", description);
      formData.append("price", price);
      formData.append("category", category);
      formData.append("subCategory", subCategory);
      formData.append("sizes", JSON.stringify(sizes)); // Convert sizes array to string because we cannot send array in the form 
      formData.append("bestseller", bestseller);
    
      const response = await axios.post(backendUrl+ "/api/product/add",formData)
      console.log(response.data); // to see if the data added on our data base 
      
         } catch (error) {
           // 
         }
  }

  return (
    <form onSubmit={onSubmitHandler} className="flex flex-col w-full items-start gap-3">
-----------------------------------------------------------------------------------------------------------------------\
    Note for append * what append mean ? Append the data to formData so it can be sent via an HTTP request (typically to a backend server) when we used in postman add those to test after we add them we send via request so append mean send the via request directly 
    10 * now if we see in console log in web when we submit the item he tell me is an error u not authorized that beacuse we add in our backend that only the token of the admin can add or remove
    11 * so for this we will send our admin token as header to can add or remove and that logic to keep the admin save as we remember here---
-----------------------------------------------------------------------------------------------------------------------------------------------------
productRouter.post('/add',adminAuth, // here the token to protect the add 
productRouter.post('/remove',adminAuth, removeProduct); // here also we send the token to protect the remove

note :

and as we remember lama defna hayde l protect lal add and remove we got to the headder in backend and add 
our token id in the headder so after we add it the add or remove its work 
----------------------------------------------------------------------------------------------------------------------------------------------------- 
    12 * we allready send our token previos in the app.jsx now we just have to do this ---------------------------------
=--------------------------------------------------------------------------------------------
import React, { useState } from "react";
import { assets } from "../assets/assets";
import axios from 'axios'
import {backendUrl} from '../App'
import { toast } from "react-toastify";


const Add = ({token}) => {

  const [image1,setImage1] = useState(false); // to store our images
  const [image2,setImage2] = useState(false);
  const [image3,setImage3] = useState(false);
  const [image4,setImage4] = useState(false);

  const [name, setName] = useState(""); // Store product name
  const [description, setDescription] = useState(""); // Store product description
  const [price, setPrice] = useState(""); // Store product price
  const [category, setCategory] = useState("Men"); // Store category value
  const [subCategory, setSubCategory] = useState("Topwear"); // Store subcategory value
  const [sizes, setSizes] = useState([]); // Store selected sizes
  const [bestseller, setBestseller] = useState(false); // Store bestseller status
  

  const onSubmitHandler = async (e) =>{

      e.preventDefault(); // if we submit our form page will not be realoded
         try {
      const formData = new FormData(); // Correct // creating one form data having all the data we have then send it into HTTPS request
      // Append the images
      image1 && formData.append("image1", image1); // here we add && because if i select one image i dont want the rest of images send so here we ask if image 1 available so send it also for the rest images
      image2 && formData.append("image2", image2); // what append mean ? Append the data to formData so it can be sent via an HTTP request (typically to a backend server) when we used in postman add those to test after we add them we send via request so append mean send the via request directly 
      image3 && formData.append("image3", image3);
      image4 && formData.append("image4", image4);

      // Append text fields
      formData.append("name", name);
      formData.append("description", description);
      formData.append("price", price);
      formData.append("category", category);
      formData.append("subCategory", subCategory);
      formData.append("sizes", JSON.stringify(sizes)); // Convert sizes array to string because we cannot send array in the form 
      formData.append("bestseller", bestseller);

      const response = await axios.post(backendUrl+ "/api/product/add",formData,{headers:{token}})
    //  console.log(response.data);  to see if the data added on our data base 

       // Check if the product was successfully added so add notification then reset all to add again
      if (response.data.success) {
      toast.success(response.data.message); // Show success toast notification

      setName(''); // Clear the name field after successful submission
      setDescription(''); // Clear the description field after successful submission
      setPrice(''); // Clear the price field
      setCategory('Men'); // Reset the category
      setSubCategory('Topwear'); // Reset the subcategory
      setSizes([]); // Reset the selected sizes
      setBestseller(false); // Reset the bestseller status
      // Reset images if necessary
      setImage1(false);
      setImage2(false);
      setImage3(false);
      setImage4(false);

  } else {  // else if not sucsses response an error toast notification
       toast.error(response.data.message)
  }
   }catch (error) {
           console.log(error);
           toast.error(error.message)
         }
  }

  
  return (
    <form onSubmit={onSubmitHandler} className="flex flex-col w-full items-start gap-3">
=--------------------------------------------------------------------------------------------
  13 * now we finish adding the token and we do a logic that if the token sucsses and added the product it will reset the rest of the product
  14 * now we test if its work then we will see if the product added on the mongo db and we see the toast notification that is the product successfully added
  15 * now we finishh the add product in admin pannel now we will work on displaying our product in the list 
 =------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 
STEP20///////////////////////////CREATE THE LIST PRODUCT UI AND  API  OF ADMIN/////////////////////////////////////////////////////////////////////////////////////////////////

  1 * first thing we do that creating a list variable to store the API in those var 
  2 * then we will get The API of our list and test if its work ----------------
---------------------------------------------------------------------------------------
import axios from "axios";
import React, { useEffect, useState } from "react";
import { backendUrl } from "../App";

const List = () => {

  const [list, setList] = useState([]); // first we have to get the data from the API and store it in our variables

  const fetchList = async () => {
    // we will run this fnction wehenever this page loaded in useeffect
    try {
      
      const response = await axios.get(backendUrl + '/api/product/list') // get to getting the API of our data and get the list items
      console.log(response.data);
      
    } catch (error) {
      
    }
  };

  useEffect(()=>
    {
    fetchList()
    }, 
[],)

  return <div></div>;
};

export default List;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   3 * then we will open the inspact and select the list items API work so and if its work it show all our product data
   4 * now we will store the product array info in our state variable List that we create ---------------------
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const List = () => {
  const [list, setList] = useState([]); // first we have to get the data from the API and store it in our variables

  const fetchList = async () => {
    // we will run this fnction wehenever this page loaded in useeffect
    try {
      const response = await axios.get(backendUrl + "/api/product/list"); // get to getting the API of our data and get the list items
      // console.log(response.data); to see if we getting the product data
      if (response.data.success) {
        // if the data sucsess  true then store it in our var
        setList(response.data.products); // like this we store the products in our set list so now we can display the data by using our variable
      } else {
        // else if the products are not showing
        toast.error(response.data.message); // so show an error message
      }
    } catch (error) {
      console.log(error);
      toast.error(error.message);
    }
  };

  useEffect(() => {
    fetchList();
  }, []);
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  5 * so like this we store the products in our variable then we will displaying our product like this ---
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import axios from "axios";
import React, { useEffect, useState } from "react";
import { backendUrl, currency } from "../App";
import { toast } from "react-toastify";

const List = () => {
  const [list, setList] = useState([]); // first we have to get the data from the API and store it in our variables

  const fetchList = async () => {
    // we will run this fnction wehenever this page loaded in useeffect
    try {
      const response = await axios.get(backendUrl + "/api/product/list"); // get to getting the API of our data and get the list items
      // console.log(response.data); to see if we getting the product data
      if (response.data.success) {
        // if the data sucsess  true then store it in our var
        setList(response.data.products); // like this we store the products in our set list so now we can display the data by using our variable
      } else {
        // else if the products are not showing
        toast.error(response.data.message); // so show an error message
      }
    } catch (error) {
      console.log(error);
      toast.error(error.message);
    }
  };

  useEffect(() => {
    fetchList();
  }, []);

  return(
    
    <>
      <p className="mb-2">ALL Products List</p>
      <div className="flex flex-col gap-2">
           {/*--------list table title */}
          <div className="hidden md:grid grid-cols-[1fr_3fr_1fr_1fr_1fr] items-center py-1 px-2 border bg-gray-100 text-sm">
            <b>Image</b>
            <b>Name</b>
            <b>Category</b>
            <b>Price</b>
            <b className="text-center" >Action</b>
          </div>
          
          {/*----------product list --------- */}

          {
            list.map((item,index)=>( // we have stored the products detail from backend API into this list var and we map for those items and idex of array 
               <div key={index} className="grid grid-cols-[1fr_3fr_1fr] md:grid-cols-[1fr_3fr_1fr_1fr_1fr] gap-2 py-1 px-2 border text-sm" >
                <img src={item.image[0]} className="w-12" /> {/*index0 mean item 1 */}
                <p>{item.name}</p>
                <p>{item.category}</p>
                <p>{currency}{item.price}</p> {/*we import the currency from the app.jsx to show the $ beside the price */}
                <p className="text-right md:text-center cursor-pointer text-lg">X</p> {/*this X to remove the product */}
               </div>
            ))
          }
      </div>
    </>

  )
};

export default List;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  6 * now we finish displaying the product perfectly so shu 3melna la edrna njibon bi basata we make an API call for products 
  7 * then we stored it into our var then we map the products so no we will work on the remove property that when i click on (X) it will remove the icons like this -------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import axios from "axios";
import React, { useEffect, useState } from "react";
import { backendUrl, currency } from "../App";
import { toast } from "react-toastify";

// getting our save token from app.jsx
const List = ({token}) => {

  const [list, setList] = useState([]); // first we have to get the data from the API and store it in our variables

  //-------------fetchList to get API of products and Store them in const List--------------------
  const fetchList = async () => {
    // we will run this fnction wehenever this page loaded in useeffect
    try {
      const response = await axios.get(backendUrl + "/api/product/list"); // get to getting the API of our data and get the list items
      // console.log(response.data); to see if we getting the product data
      if (response.data.success) {
        // if the data sucsess  true then store it in our var
        setList(response.data.products); // like this we store the products in our set list so now we can display the data by using our variable
      } else {
        // else if the products are not showing
        toast.error(response.data.message); // so show an error message
      }
    } catch (error) {
      console.log(error);
      toast.error(error.message);
    }
  };

 //---------------------to remove the product and upate the new product-------------------------------
  const removeProduct = async(id) =>{ // here we bring the id that we will get from mapping so whenever this function will be excuted we will remove that product from the data base
    try {
        
      const response = await axios.post(backendUrl + "/api/product/remove",{id},{headers:{token}}) // here we add the id beacuse by the id we delte the item
                                                                                           //we add token because we add the AdminAuth to the remove so no one can remove or add just the token of the admin for more secure
      if (response.data.success) {
         toast.success(response.data.message);
         await fetchList(); // we call this fetchList to update the new state of our product so when i delete item it well be removed from data base but it will still show it in our product list page so we call it to updating the new delete state
         
      }else{
        toast.error(response.data.message)
      }
                                                                                                  
    } catch (error) {
      console.log(error);
      toast.error(error.message);
    }
  }


  useEffect(() => {
    fetchList();
  }, []);

  return(
    
    <>
      <p className="mb-2">ALL Products List</p>
      <div className="flex flex-col gap-2">
           {/*--------list table title */}
          <div className="hidden md:grid grid-cols-[1fr_3fr_1fr_1fr_1fr] items-center py-1 px-2 border bg-gray-100 text-sm">
            <b>Image</b>
            <b>Name</b>
            <b>Category</b>
            <b>Price</b>
            <b className="text-center" >Action</b>
          </div>
          
          {/*----------product list --------- */}

          {
            list.map((item,index)=>( // we have stored the products detail from backend API into this list var and we map for those items and idex of array 
               <div key={index} className="grid grid-cols-[1fr_3fr_1fr] md:grid-cols-[1fr_3fr_1fr_1fr_1fr] gap-2 py-1 px-2 border text-sm" >
                <img src={item.image[0]} className="w-12" /> {/*index0 mean item 1 */}
                <p>{item.name}</p>
                <p>{item.category}</p>
                <p>{currency}{item.price}</p> {/*we import the currency from the app.jsx to show the $ beside the price */}
                <p onClick={()=>removeProduct(item._id)} className="text-right md:text-center cursor-pointer text-lg">X</p> {/*this X to remove the product by ID */}
               </div>
            ))
          }
      </div>
    </>

  )
};

export default List;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  8 * now we finish the list and remove product we calling the API of remove and sending the id and token to work i explain in some note everything
  9 * noww we winish the admin pannel with add and remove and connect the API backend of our admin pannel 
  10 * but now we storing our product data in data base still not showing in frontend so now we will connect the API into the frontend
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 STEP21//////////////////////CONNECTING BACKEND API WITH FRONTEND ////////////////////////////////////////////////////////////////////////
   
   1 * first we will install the axios package in the frontend to call the API but we have to close the front end local host first then we will type (npm i axios)
   2 * then the product data in data base still not showing in frontend so now we will connect the API into the frontend
   3 * but befor this the product that we add in frontend in assets that we create we will copy those product and then add them in data base by using admin pannel now i will add like 5 or 9 then i will complete display them
   4 * then we complete the work so we will right click on top of our files and select close all 
   5 * then we will add a new file in frontend with the name (.env) and we will open the env file and add the url of our backend------------------
--------------------------------------------------------------------------------------------------------------------------------------
VITE_BACKEND_URL = 'http://localhost:4200' 
--------------------------------------------------------------------------------------------------------------------------------------
   6 * then to easly acsses this backend url we will add it into the shopcontext like this--------------
----------------------------------------------------------------------------------------------------
export const ShopContext = createContext ();

const ShopContextProvider = (props)=>{
 
     const currency = "$"; /* here if i change the currency it will updaitet for  entire  page */ 
     const delivery_fee = 10 ; 
     const [search,setSearch] = useState('');
     const [showSearch,setShowSearch] = useState(false);
     const [cartItems,setCartItems] = useState({});
     const navigate = useNavigate() ;
     const backendUrl = import.meta.env.VITE_BACKEND_URL; 
----------------------------------------------------------------------------------------------------
  7 * then we will add it into our value to easy acsses it like this --------------
----------------------------------------------------------------------------------------------------
const value = { 
     products , currency , delivery_fee ,  // i can accses this accross all the compnents mtl assests.jsx
     search ,setSearch ,showSearch,setShowSearch,
     cartItems,addToCart,getCartCount , updateQuantity,getCartAmount,
     navigate,backendUrl,
} 
----------------------------------------------------------------------------------------------------
   7 * now we will do somthing that when used to create the assests and we add product and we add the product into this we create a const product like this-------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
export const product = [ /* hayda array object b albu abaya cart m3 wasf wklu */ 

   {   _id : "Dress",
    name:"Women Cool Party dress",
    description:"that is the best dress ..",
    price:111,
    image: [Dress_Bieje,Dress_light,Dress_Light_Pink,Dress_gray] , 
    category :"Women",
    subCategory:"topwear",
    sizes : ["S","M","L","xl"],
    date: 2020298383,
    bestseller:true,    /* amalna el best seller 3shen iza ken hal product bynbe3 bhto true fa bbayn iza false ma bbayen */ 
  
   },
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
   8 * now we will fix product into products and we will fix it in the ShopContext because we add it to ShopContext to can acsses this products easly from any compnents
   9 * so we will fix it also in the shopcontext to products and add it to the const value as products
   10 * then we will fix it in the (bestseller.jsx) and (latestCollection) and (relatedproduct) and(collection.jsx)  from pages and(product.jsx) and (Orders.jsx) and(Cart.jsx) after that we can now remove the products from assets and we will not take an error
   11 * and now we will add another new products var we will replace this instand the products of assets like this ----
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
const currency = "$"; /* here if i change the currency it will updaitet for  entire  page */
  const delivery_fee = 10;
  const [search, setSearch] = useState("");
  const [showSearch, setShowSearch] = useState(false);
  const [cartItems, setCartItems] = useState({});
  const backendUrl = import.meta.env.VITE_BACKEND_URL;
  const [products, setProducts] = useState([]);
  const navigate = useNavigate();
  ---------------------------------- then we will add it here 
  const value = { 
     products , currency , delivery_fee ,  // i can accses this accross all the compnents mtl assests.jsx
     search ,setSearch ,showSearch,setShowSearch,
     cartItems,addToCart,getCartCount , updateQuantity,getCartAmount,
     navigate,backendUrl,
} 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  12 * now explain for what we create here nehna abel ken 3ena el products li 3mlinon bel assets w mzabtin kelshi 3ala ases lproducts li bel assets hala khelset mahamt el assets 
  13 * 3melna new var bi nafs esm el products te3 el assets wbnkhazen fi el products men el data base bdel t3un el assets wnhna like this -------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

  const getProductsData = async () => {
    try {
      
      const response = await axios.get(backendUrl + '/api/product/list')
      console.log(response.data)
    } catch (error) {
        //
    }
  };

  useEffect(()=>{
       getProductsData()
  },[])
  
  const value = {
    products,
    currency,
    delivery_fee, // i can accses this accross all the compnents mtl assests.jsx
    search,
    setSearch,
    showSearch,
    setShowSearch,
    cartItems,
    addToCart,
    getCartCount,
    updateQuantity,
    getCartAmount,
    navigate,
    backendUrl,
  };
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
   14 * so here before the const value we call the API of List products to store it into our product var  but befor we store it
   15 * we will test if the API call work in console log and we add this function to use effect so whenever i realed the getProductsData will excuted 
   16 * after we see in isnpact that the products array its true  and having our item now we will store it into our new products var to display them like this------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  const getProductsData = async () => { // to get the products from   data base
    try {
      const response = await axios.get(backendUrl + "/api/product/list");
      //console.log(response.data)
      if (response.data.success) {
        setProducts(response.data.products);
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      console.log(error);
      toast.error(error.message);
    }
  };
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  17 * so like this we storing the products data in setProducts now we will open the website and we will see all our products 
  18 * but there is a problem that is when i refresh the page the products disappear so to fix that we will open(bestseller.jsx) and add products into the useeffect ------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 const {products} = useContext(ShopContext);
    const [BestSeller,setBestSeller] = useState([]); 
    useEffect(()=>{
        const bestProduct = products.filter((item)=>(item.bestseller)); {/* byaaml filtering wbjib el best seller el true bs */ }
        setBestSeller(bestProduct.slice(0,7))
    },[products])
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  19 * so we add the products into array of use useEffect so whenever the products get updated if i add a new products so the the setbestseller function will be displaying the products 
  20 * also we will do the same steps on the latestCollection like this -------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 const [latestProduct,setLatestProduct]= useState([]);
    const {products} = useContext(ShopContext); {/* hk bysht8l el shopcontext jebt el array te3 lproduct bdun azeeb */  }
   {/*  console.log(product); to see that eu f3lan jebna el data t3it el array */ }
   useEffect(()=>{
     setLatestProduct(products.slice(0,20)); {/*awl shi .slice jebna neskha an el array krmel bi 7al ana ghayrt feya ma ytghayar b neskha laslye wjbt 0 la 10 product law fi 100 product khls jbt 10 mnon  */ }
   },[products]) 
   {/* this return emtyy array */ }
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   21 * and we will fix the collection also as the same steps this ------------
-----------------------------------------------------------------------------------
     useEffect(() => {
      applyFilter();
    }, [category,subCategory,search,showSearch,products] ); // ✅ Runs applyFilter() every time category changes
-----------------------------------------------------------------------------------
   22 * so right now if i refresh they are still and if i update anyy products and refresh it will add the new update 
   23 * but now we facing a problem that when i want to add the product into my cart the sizes show like this ["M"]  to fix that we will open (product.jsx) and change this-------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  const fetchProductData = async () => {
    products.map((item) => {
      if (item._id === productId) { // If product ID matches the URL ID
        setProductData({
          ...item,
          sizes: JSON.parse(item.sizes)  // ✅ Convert the string to an array
        });
        setImage(item.image[0]); // Set the first image of the product
        return null; // Exit the function 
      }
    });
  };
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
  24 * we convert the string into array to make it work like this we finish connect the API to displaying the product
  25 * now we will create the API of the user Login and registering
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 ////////////////////////CONNECTIN BACKEND API WITH USER && LOGIN //////////////////////////////////////////////////////////////////////////////
   1 * add the API first we will add a variable in the shopcontext with the name of token settoken to store the login  token in this variable like this ----------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  const backendUrl = import.meta.env.VITE_BACKEND_URL;
  const [products, setProducts] = useState([]); // instand of the assets products to store the new products from data base we just replace it
  const [token,setToken] = useState('')
  const navigate = useNavigate();
  -----------------------then we will add it to the const value to can easy acsses it -------------------
  export const value = {
   setToken,
    token,
  };
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  2 * then  now we will open the login.jsx file in pages to get the token from shopcontext to can acsses the token and backendUrl and we create a new state variable [name,email,pass] to store the input when we login and enter our names or pass or email -----------
----------------------------------------------------------------------------------------------------------------------------------------------
  const [currentState,setCurrentState] = useState('Login'); // hayde 7alet el sign up 
  const [token,setToken,navigate,backendUrl] = useContext(ShopContext); // get it fromm shopcontext
  
  const [name,setName] = useState('') // to store the input name from login 
  const [password,setPassword] = useState('') // to store the password from login
  const [email,setEmail] = useState('') // to store the email from our input email  

  const onSubmitHandler = async(event) =>{ // event hye el input aya input rah ydakhlu el user
     event.preventDefault();  // to remove the reload page after we sign up
     try {
          
        } catch (error) {
          
        }
  }
----------------------------------------------------------------------------------------------------------------------------------------------
  3 *  then we will add those state var to our input by usinng (onchange) so in input when we type our name and change to password so when we change we get the value after that we can make the API call like this ------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  const onSubmitHandler = async(e) =>{ // event hye el input aya input rah ydakhlu el user
     e.preventDefault();  // to remove the reload page after we sign up
     try {
          if (currentState === "Sign Up") { // if state === sign up we will call the API of register

            const response = await axios.post(backendUrl +  '/api/user/register', { name, email, password }); // post mean posting the name email pass in body when we used to test in postman the register we test it in our body and we tell req.body then we send to see if true
            console.log(response.data);
            
          }
        } catch (error) {
          console.error('Something went wrong:', error);
        }
  }

  return (
    <form onSubmit={onSubmitHandler} className='flex flex-col items-center w-[90%] sm:max-w-96 m-auto mt-14 gap-4 text-gray-800' >
            
            <div className='inline-flex items-center gap-2 mb-2 mt-10'>
                   <p className='prata-regular text-3xl '>{currentState}</p> {/* it will be sign up */ }
                   <hr  className='border-none h-[1.5px] w-8 bg-gray-800'/>

            </div>
             {/* iza lcurrent state  btsewe login la taaml shi else iza ma btsewe login hot l name */ }
            {currentState === 'Login' ? '' : <input onChange={(e)=>setName(e.target.value)} value={name} className='w-full px-3 py-2 border border-gray-800' type="name" placeholder='Name' required/>} 
               <input onChange={(e)=>setEmail(e.target.value)} value={email} className='w-full px-3 py-2 border border-gray-800' type="email" placeholder='Email 'required />
               <input onChange={(e)=>setPassword(e.target.value)} value={password} className='w-full px-3 py-2 border border-gray-800' type="password" placeholder='Password ' required/>
               <div className='w-full flex justify-between text-sm mt-[8px]'>
                
                   <p className='cursor-pointer'>Forgot Your Password</p>
                   {
                    currentState === 'Login' 
                    ? <p onClick={()=> setCurrentState('Sign Up')} className='cursor-pointer'>Create account </p>
                    : <p onClick={()=> setCurrentState( 'Login')} className='cursor-pointer'>Login Here</p>
                   }
                
               </div>
               <button type="submit" className='bg-black text-white font-light px-8 p-2 mt-4'>{currentState === 'Login' ? 'Sign In ' : 'Sign Up'}</button>
    </form>
  )
}

export default Login
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  4 * so now we finish storing the input in our var now we will test if our API call work in inspact for the register 
  5 * we will test to exists user if he response with false and we will test by new user and after we succes we will store the token that we take in our token variable like this --------------
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   const onSubmitHandler = async (e) => {
      // event hye el input aya input rah ydakhlu el user
      e.preventDefault(); // to remove the reload page after we sign up
      try {
        if (currentState === "Sign Up") {
          // if state === sign up we will call the API of register
  
          const response = await axios.post(backendUrl + "/api/user/register", {name,email,password}); // post mean posting the name email pass in body when we used to test in postman the register we test it in our body and we tell req.body then we send to see if true
          // console.log(response.data);
          if (response.data.success) {
            // if token is true and sucsess
            toast("Your Account has Been Created ");
            setToken(response.data.token); // so store the token in our var
            localStorage.setItem("token", response.data.token); // then also save the token into our localstorage so when we refresh and close the page we will still login
          } else {
            toast.error(response.data.message);
          }
        } else {
          // this else that is the current state not sign up mean is login so we will call the api of login
          const response = await axios.post(backendUrl + "/api/user/login", {   email, password,});
          // console.log(response.data); to see if the login sucsses we will store it also
          if (response.data.success) {
            toast("Welcome You Logged In !");
            setToken(response.data.token); // so if the data sucsess we will store it in our token like the register
            localStorage.setItem("token", response.data.token); // then also save the token into our localstorage so when we refresh and close the page we will still login
          } else {
            // if the login not success
            toast.error(response.data.message);
          }
        }
      } catch (error) {
        console.error("Something went wrong:", error);
        toast.error(error.message);
      }
    };
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   6 * now we finish testing the register and the login and both work and we store them in our state variable and in the local storage 
   7 * and if we open the inspact and the aplication then local storage we will see the token are saved
   8 * after this we will add the functinality that when we click on the login and when the token will be saved in the state variable then we will redirect the user to the home page like this----
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
useEffect(()=>{ // so this function will be excuted and do her job whenever the product been updated 
if (token){ // if token are true 
  navigate('/')
}
},[token]) // the whenever the token will be updated the navigate will redirect me to the home page
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   9 * this logic is work and i explain each part what his job but we still having an issue that is after i login and the homedirectory open if i refresh the webpage i can enter to the log page again to fix that
   10 * we will open the shopcontext and do this _---------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  useEffect(() => {
    // to show the data whenever this function will e excuted
    getProductsData();
  }, []);

// i can add this function even in the login page it will work the same 
  useEffect(()=>{
    if (!token && localStorage.getItem('token')){ // if there is not token and the local storage has the token so
        setToken(localStorage.getItem('token')) // get the token from the localstorage and add it ino our var like this even we refresh it will not open the loggin page
    }
  },[])

  const value = {
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  11 * now even if i refresh the page i will still loggign and i cant open the login page
  12 * now we will work on the logout button we will open the navbar.jsx and do this -------------------
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 const Navbar = () => {
      
   const [visible,setVisible] = useState(false); {/*this for the menu bar icon */ }

   const {setShowSearch,getCartCount,navigate,token,setToken,setCartItems} = useContext(ShopContext);

   const logout = ()=>{
    navigate('/login')
    localStorage.removeItem('token') // we will remove the token from the local storage when he logout
    setToken('') // clearing the token
    setCartItems({})// clearing the cart items
 
   }
  return (
                    // then we add it into logout
      <p onClick={logout} className='cursor-pointer hover:text-black'>Logout </p> 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    13 * so like this we add the Function to the logout but we still having a problem that when i logout when i click on profile button i will still see logout and my profile so to remove this we will add the logic here---
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      <div className='group relative'>  {/*relative iza fi tnen box bsiru iza fetu bba3d 3adi */ }
    <img onClick={()=> token ? null : navigate('/login')} src={assests.profile_icon} className='w-7 cursor-pointer' alt="prf icon" /> 
             {/*Drop down Menu */ }
           {/* group-hover block mean on hover show the group and hidden la nkhfyon wybynu onhover */}
    { token &&  <div className='dropdown-menu group-hover:block hidden absolute  right-0 pt-4 '> {/* explain for token && so we ask if the token available so show the div that she have the profile and orders  */}

           <div className=' flex flex-col gap-2 w-36 py-3 px-5 bg-slate-100 text-gray-500 rounded '>
                   <p className='cursor-pointer hover:text-black'>My Profile</p>
                   <p className='cursor-pointer hover:text-black' > Orders </p>
                   <p onClick={logout} className='cursor-pointer hover:text-black'>Logout </p>
                </div>
            </div>}
       </div> 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  14 * so like this if the toke available then show the div and if its not available do not show those icons 
  15 * now we will add the logic that when we loggin and click on orders that will take me to the orders page like this 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  <p onClick={()=>navigate('/orders')} className='cursor-pointer hover:text-black' > Orders </p>
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  16 * now if we click on orders page we will see that topk me to the orders page now we finish the connecting the API to register and login and Logout
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

////////STEP22 SAVE THE CARTS ITEMS THAT THE USER ADD INTO HIS CARTS TO THE DATA BASE ///////////////////////////////////////////////////////////

  1 *so now we will add the logic if the user login and fill his carts items and procceds to checkout so we will store the item that he add in the data base 
  2 * now we will close frontend files and openn (backend) and open the controllers.js folder then we will add a new files in controllers with the name (cartController.js) then we will add the logic-------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// add product to user cart 
const addToCart = async(req,res) =>{

}

// update user cart
const updateCart = async(req,res) =>{

}

// get user Cartdata
const getUserCart = async(req,res) =>{

}


export {addToCart,updateCart,getUserCart}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  3 * now we will add the routes for that function mean the API to create the routes we will open routes folder and add a new files with the name (cartRoute.js) and we will do this ---
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import express from 'express'
import { addToCart,getUserCart,updateCart } from '../controllers/cartController.js'

const cartRouter = express.Router(); // creating the Routing 

cartRouter.post('/get',getUserCart)
cartRouter.post('/add',addToCart)
cartRouter.post('/update',updateCart)


export default cartRouter
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 4 * then we now we will add this routes to the API endpoint in our server file like this-------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ------- API Endpoints ---------
app.use('/api/user', userRouter);
app.use('/api/product',productRouter);
app.use('/api/cart',cartRouter);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 5 * now we will create the middleware for  the authenticate user whenever the user will be add the product in the cart or update the cartdata or place the orders so we will use this middleware
 6 * so in this middleware we will convert the users token to the users id to create that first create a new file with (authUser.js)-------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 import jwt from 'jsonwebtoken'

const authUser = async(req,res,next)=>{

    const {token} = req.headers; // getting the token from the headders

    if (!token) { // if the token not available 
        return res.json({success:false,message:'Not Authorized Login Again'})  
    }

    try {
        // decoding mean extract the token to see id and expire date and the information 
        const token_decode = jwt.verify(token,process.env.JWT_SECRET)// jwt.verify() checks if the token is valid (i.e., it hasn’t been tampered with and hasn’t expired).
        req.body.userId = token_decode.id // getting the user Id from the token and add it into decode using that we can update the cart or place the order 
        next();

    } catch (error) {
        console.log(error);
        res.json({success:false,message:error.message})
    }


    
}

export default authUser

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  7 * like this we decode the token mean and explain what we do in the middleware-----
----------------------------------------------
If the token contains:

{
  "id": "123",
  "email": "user@example.com"
}

then token_decode would be:

{ id: '123', email: 'user@example.com', iat: 1680000000, exp: 1680003600 }

req.body.userId = token_decode.id explain

Imagine you received a token that, once decoded, gives you this:

const token_decode = {
  id: "123abc",
  email: "user@example.com"
}

Then this line:
req.body.userId = token_decode.id

will make req.body look like this:

req.body = {
  userId: "123abc"
}

You're basically saying:

"Hey, grab the user's ID from the token, and put it into the request body 
so it can be used later (maybe to save data to the database or check permissions)."

like this we convert the token to id to can acsses it and make a permission

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  8 * now we will add this authUser into the routes in the cartRoute like this----------
-----------------------------------------------------------------------------------

const cartRouter = express.Router(); // creating the Routing 

cartRouter.post('/get', authUser,getUserCart)
cartRouter.post('/add',authUser,addToCart)
cartRouter.post('/update',authUser,updateCart)


export default cartRouter
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  9 * now suppose anyone hit this API endpoint then the token will be verfied and using that token we will get the user ID in the body
  10 * now we will continue work on the cartController like this ------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import userModel from "../models/userModel.js";

// add product to user cart
const addToCart = async (req, res) => {
  try {
    const { userId, itemId, size } = req.body; // after using that user Id from user model we will find that user  and we will modify that card data and we will add the item ID and this sizes and their cartdata

    const userData = await userModel.findById(userId); // here the userId that we will get from the request.body
    let cartData = await userData.cartData; // extract the cartData and this cartData if we open userModel file we will see an emty object of cartData so we call that cartData from user model and add userData to this cartData

    if (cartData[itemId]) {
      // if the cartData having an ID
      if (cartData[itemId][size]) {
        // and if the size with id available
        cartData[itemId][size] += 1; // so incrase the quantity of the size 
      } else {
        cartData[itemId][size] = 1;
      }
    } else {
      // else if there is no itemId in this cart
      cartData[itemId] = {};
      cartData[itemId][size] = 1;
    }

    await userModel.findByIdAndUpdate(userId, { cartData }); // we are sending the updated data into this object
    res.json({ success: true, message: "Added To Cart" });
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

// update user cart
// update user cart
const updateCart = async (req, res) => {
  try {
    const { userId, itemId, size, quantity } = req.body; // we request those from body
    const userData = await userModel.findById(userId); // get user by ID
    let cartData = await userData.cartData; // extract the cartData
 
    cartData[itemId][size] = quantity;   // Update the quantity for the specific item and size

    await userModel.findByIdAndUpdate(userId, { cartData }); // update user's cart
    res.json({ success: true, message: "Cart Updated" });

  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

// get user Cartdata
const getUserCart = async (req, res) => {
  try {
    const { userId } = req.body; // get user ID from request mean frontend 
    const userData = await userModel.findById(userId); // here the userId that we will get from the request.body
    let cartData = await userData.cartData; // extract the cartData

    res.json({ success: true, cartData });
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

export { addToCart, updateCart, getUserCart };
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 11 * now we finish add the logic for addtocart and for the rest of the our function now we will link them to the frontend directly 
 12 * we will open the shopcontext where we adding the logic for all the cartdata items and we will do this ------------------
--------------------------------------------------------------------------------------------------------------------------
const addToCart = async (itemId, size) => {
    // async yaani wa2t bfut a shi wbrj3 elh ma byaaml relod lal page
    if (!size) {
      toast.error("Select Prodct Size"); // this an alert error message
      return;
    }
    let cartData = structuredClone(cartItems);
    // `structuredClone(cartItems)` → Creates a deep copy of the cartItems object.
    // This ensures that modifying `cartData` doesn't directly change `cartItems` before updating the state.

    if (cartData[itemId]) {
      // Checks if the item with the given `itemId` already exists in the cart.

      if (cartData[itemId][size]) {
        // Checks if the selected size of this item already exists in the cart.
        cartData[itemId][size] += 1; // If it exists, increase the quantity by 1.
      } else {
        cartData[itemId][size] = 1; // If the size does not exist, initialize it with a quantity of 1.
      }
    } else {
      cartData[itemId] = {}; // If the item does not exist in the cart, create an empty object for it.
      cartData[itemId][size] = 1; // Set the size with a quantity of 1.
    }
    setCartItems(cartData);

    if (token) { // if tokem is available 
      try {
        await axios.post( backendUrl + "/api/cart/add",{ itemId, size }, { headers: { token } });
      } catch (error) {
        console.log(error);
        toast.error(error.message)
      }
    }
  };

--------------------------------------------------------------------------------------------------------------------------
  13 * now we just update in the last if token is available so do that now we will test in front end we will add to art anything and open the data base to see if they are adding to database
  14 * now if we addtocart anything with sizes we will see that the object is saving the cartdata with the same id of the product so its perfectly workk 
  15 * now we will calling the API for the updateQuantity so when we update quantity it will be updated in database like this ---------
 --------------------------------------------------------------------------------------------------------------------------

  const updateQuantity = async (itemId, size, quantity) => {
    let cartData = structuredClone(cartItems); // Create a deep copy of cartItems to avoid modifying the original state directly
    cartData[itemId][size] = quantity; // Update the quantity of the specific product size
    setCartItems(cartData); // Update the state with the modified cart data
    if (token) // if token available
    try {

      await axios.post(backendUrl + 'api/cart/update',{itemId, size, quantity},{headers:{token}}) // we passing the token to can addtocart 
      
    } catch (error) {
      console.log(error);
      toast.error(error.message)
    }
    }
  };
--------------------------------------------------------------------------------------------------------------------------\
 16 * like this if we incres the quantity it will incrase in data base but we still have a problem that when we refresh the webpage the cartitems its gone we will fix that like this ---
----------------------------------------------------------------------------------------------------------------------------
  const getUserCart = async(token)=>{
      try {
        
          const response = await axios.post(backendUrl + '/api/cart/get',{},{headers:{token}})
          if (response.data.success) { // if the data of the cart true and having the items
            setCartItems(response.data.cartData) // then store the items in cartitems
          }
      } catch (error) {
        console.log(error);
        toast.error(error.message);
      }
  }
 ----------------------------------------------------------------------------------------------------------------------------
 17 * now we have to run this function whenever we reload the web page so we will using use effect-------------
-------------------------------------------------------------------------------------------------------------
 const getUserCart = async(token)=>{
      try {
        
          const response = await axios.post(backendUrl + '/api/cart/get',{},{headers:{token}})
          if (response.data.success) { // if the data of the cart true and having the items
            setCartItems(response.data.cartData) // then store the items in cartitems
          }
      } catch (error) {
        console.log(error);
        toast.error(error.message);
      }
  }
   
  useEffect(() => {
    // to show the data whenever this function will e excuted
    getProductsData();
  }, []);

  // i can add this function even in the login page it will work the same
  useEffect(() => {
    if (!token && localStorage.getItem("token")) {
      // if there is not token and the local storage has the token so
      setToken(localStorage.getItem("token")); // get the token from the localstorage and add it ino our var like this even we refresh it will not open the loggin page
      getUserCart(localStorage.getItem("token")) // this function will be excuted whenever the token is available so if i have the token even if i reload the page my carts items will still with my quantity
    }
  }, []);  
-------------------------------------------------------------------------------------------------------------
  18 * so like this the cartitems will still even if i reload the webpage but we will test in data base and in data base we will increase the quantity size and back to the webpage to see if the quantity are updated 
  19 * but we facing and error and that error in pages folder in cart items and updated like this ----------
-------------------------------------------------------------------------------------------------------------
import "react";
import { useContext, useEffect, useState } from "react";
import { ShopContext } from "../context/ShopContext";
import Title from "../componens/Title";
import { assests } from "../assets/assests";
import CartTotal from "../componens/CartTotal";
const Cart = () => {
  const { products, currency, cartItems, updateQuantity, navigate } =
    useContext(ShopContext);
  const [cartData, setCartData] = useState([]);

  useEffect(() => {
    if (products.length > 0) {
      const tempData = []; // Initialize an empty array to store structured cart data

      for (const items in cartItems) {
        // Loop through each product in cartItems
        for (const item in cartItems[items]) {
          // Loop through each size of the product
          if (cartItems[items][item] > 0) {
            // Check if the quantity of the item is greater than 0
            tempData.push({
              // Add the item details to the tempData array
              _id: items, // Store the product ID
              size: item, // Store the selected size
              quantity: cartItems[items][item], // Store the quantity
            });
          }
        }
      }
      setCartData(tempData);
    }
  }, [cartItems, products]); // This useEffect runs every time cartItems changes

  return (
    <div className="border-t pt-14">
      {" "}
      {/* Main container for the cart */}
      <div className="text-2xl mb-3">
        <Title text1={"YOUR"} text2={"CART"} />{" "}
        {/* Displays the title "YOUR CART" */}
      </div>
      <div>
        {cartData.map((item, index) => {
          // Loops through cartData to display each item
          const productData = products.find((product) => product._id === item._id ); // Finds product details by matching ID
          return (
            <div
              key={index}  className="py-4 border-t text-gray-700 grid grid-cols-[4fr_0.5fr_0.5fr] sm:grid-cols-[4fr_2fr_0.5fr] items-center gap-4"    >
              <div className="flex items-start gap-6 ">
                <img className="w-16 sm:w-20"src={productData.image[0]} alt=""/>
                {/* Displays product image */}
                <div>
                  <p className="text-xs sm:text-lg font-medium ">
                    {productData.name}
                  </p>
                  {/* // Displays product name */}
                  <div className="flex items-center gap-5 mt-2 ">
                    <p>
                      {currency}
                      {productData.price}
                    </p>
                    {/* // Shows product price */}
                    <p className="px-2 sm:px3 sm:py-1 border bg-slate-50 ">
                      {item.size}
                    </p>

                    {/*  Shows selected size */}
                  </div>
                </div>
              </div>
              {/* (e) to get the value from the input and we will check if its empty or not */}
              {/* and we will check if this input is empty then return null else do update and get the item size and id and the number of input  */}
              <input onClick={(e) =>  e.target.value === "" || e.target.value === "0"? null: updateQuantity( item._id,  item.size,   Number(e.target.value))}className="border max-w-10 sm:max-w-20 px-1 sm:px-2 py-1 " type="number"  min={1} defaultValue={item.quantity} />
              {/* Input field to update quantity */}
              <img onClick={() => updateQuantity(item._id, item.size, 0)}
                className="w-4 mr-4 sm:w-5 cursor-pointer"
                src={assests.bin_icon}
                alt=""
              />
              {/* Delete icon to remove item from the cart*/}
            </div>
          );
        })}
      </div>
      <div className="flex justify-end my-20 ">
        <div className="w-full sm:w-[450px]">
          <CartTotal />
          <div className="w-full text-end">
            <button onClick={() => navigate("/place-order")} className="bg-black text-white text-sm my-8 py-3 w-[60%]">
              PROCEEC TO CHECKOUT
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Cart; // Exports the Cart component for use elsewhere
-------------------------------------------------------------------------------------------------------------
  20 * we just update the if (products.length > 0) then display those and we make all the page more clear 
  21 * now if we update or incres the quantity or delete products from the cart items we will see also update and delete from the mongodb so its perfectly work 
 -------------------------------------------------------------------------------------------------------------

 STEP23//////////////////CREATE PLACE ORDER FEATURE//////////////////////////////////
   1 * when we filled the form and click on cash on delivery and place the order then the order will place and we will get the order details in the database
   2 * now we will close frontend and create API for that in backend we will open controller and add a new filename(orderController.js)
   3 * to create the order APi we will create a models in models folder by name (orderModel.js) and do this-------------------------
-------------------------------------------------------------------------------------------------------------
import mongoose from 'mongoose';

const orderSchema = new mongoose.Schema({
  userId: { type: String, required: true }, // ID of the user placing the order
  items: { type: Array, required: true },   // List of items in the order
  amount: { type: Number, required: true }, // Total cost of the order
  address: { type: Object, required: true },// Shipping address
  status: {  type: String, required: true,default: 'Order Placed'}, // 📝 By default, every new order is marked as "Order Placed" so This can later be updated to "Shipped", "Delivered", "Cancelled", etc.                                                         
  paymentMethod: { type: String, required: true }, // Example: "Credit Card", "PayPal", "Cash on Delivery"
  payment: {  type: Boolean, required: true, default: false}, // 📝 Starts as false because payment hasn't been confirmed yet  Once payment is successful, it should be updated to true
  date: { type: Number, required: true }   // Timestamp of when the order was created
});

// 📝 Why use `mongoose.models.order || ...`?
//    To avoid model overwrite error in Next.js or hot reload environments
//    If model 'order' already exists (due to hot reload), reuse it instead of redefining
const orderModel = mongoose.models.order || mongoose.model('order', orderSchema);

export default orderModel;
-------------------------------------------------------------------------------------------------------------
  4 * now we will continue to the ordercontroller like this ---------------------------------------
-------------------------------------------------------------------------------------------------------------


// placing order using COD method mean cash on delivery method
const placeOrder = async(req,res)=>{

}

// placing order using Credit Cart 
const placeOrderCredit = async(req,res)=>{

}

// if i want i can add more oayment function


// All orders data For Admin Panel
const allOrders = async(req,res)=>{

}

//User Order Data For Frontend
const userOrders = async(req,res)=>{

}


// update order Status like ("Shipped", "Delivered", "Cancelled") from admin pannel
const updateStatus = async(req,res)=>{

}

 
export{placeOrder,placeOrderCredit,allOrders,userOrders,updateStatus}
-------------------------------------------------------------------------------------------------------------
  5 * now we will create the routes for those function by a new files in routes with the name (orderRoute.js) and add the Routes Like this -----------------
-------------------------------------------------------------------------------------------------------------
import express from 'express'
import {placeorder,placeOrderCredit,allOrders,userOrders,updateStatus} from '../controllers/orderController.js'
import adminAuth from '../middleware/adminAuth.js'
import authUser from '../middleware/authUser.js'
const orderRouter = express.Router()

// Admin Feature
orderRouter.post('/list',adminAuth,allOrders)// adminAuth because only the admin can see the list of all orders
orderRouter.post('/status',adminAuth,updateStatus) // also only the admin can change the status

// Payment Feature 
orderRouter.post('/place',authUser,placeOrder) // for the cash delivery
orderRouter.post('/credit',authUser,placeOrderCredit)


// user feature
orderRouter.post('/userOrder',authUser,userOrders) 

export default orderRouter
-------------------------------------------------------------------------------------------------------------
  6 *  now we will open server.js and add the endpoint for the orderRoute like this ------------
-------------------------------------------------------------------------------------------------------------
// ------- API Endpoints ---------
app.use('/api/user', userRouter);
app.use('/api/product',productRouter);
app.use('/api/cart',cartRouter);
app.use('/api/order',orderRouter);
-------------------------------------------------------------------------------------------------------------
  7 * now we will add the logic for our ordercontroller function like this -------------------
-------------------------------------------------------------------------------------------------------------
// placing order using COD method mean cash on delivery method
const placeorder = async(req,res)=>{
      
    try {
        const {userId,items,amount,adress} = req.body ; // we will get that from our form in frontend

          //we create the orderData to save those userid ,items... in the mongodb
        const orderData = {
            userId,
            items,
            adress,
            amount,
            paymentMehtod:'COD',
            payment:false, // because there is payment money so its false 
            date:Date.now()
        }

        const  newOrder = new orderModel(orderData) // we put our orderdata in orderModel for mongodb 
        await newOrder.save() // save that orderData in the mongodb

        await userModel.findByIdAndUpdate(userId,{cartData:{}}) // update the state of userId after we save then clear the cartData with emty object

        res.json({success:true,message:"Order Placed"})

    } catch (error) {
        console.log(error);
        res.json({success:false,message:error.message})
    }
}
------------------------------------------------------------------------------------------------------------- 
  8 * now we will integrate this placeorder feature in our frontend so we will create variable to store our form data when the user input and create the API call fir placeorder
  9 * so we will go to frontend and open the pages and(placeorder.jsx) then we will fo this---------
 -------------------------------------------------------------------------------------------------------------
import 'react'
import Title from '../componens/Title'
import CartTotal from '../componens/CartTotal'
import { assests } from '../assets/assests'
import { useContext, useState } from 'react'
import { ShopContext } from '../context/ShopContext'
import axios from 'axios'
import { toast } from 'react-toastify'

const Placeorder = () => {
  const [method, setMethod] = useState('COD')
  const { navigate,backendUrl,token,cartItems,setCartItems,getCartAmount,delivery_fee,products } = useContext(ShopContext)

  // store user inputs in formData
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    street: '',
    city: '',
    state: '',
    country: '',
    zipCode: '',
    phone: '',
  })

  // update formData on each input change
   const onChangeHandler = (event) => {
    const name = event.target.name; // Use event.target.name for the field name
    const value = event.target.value; // Use event.target.value for the field value
    setFormData(data => ({ ...data, [name]: value }));
}

  const onSubmitHandler = async (e) => {
     // 1️⃣ Prevent the default form‑submit page reload
     e.preventDefault(); // ← typo fixed from preventDefauly()
   
     try {
       // 2️⃣ Initialize an empty array to collect order items
       let orderItems = [];
   
       // 3️⃣ Loop over each product ID in the cartItems object
       for (const items in cartItems) {
         // 4️⃣ For each size variant under that product
         for (const item in cartItems[items]) {
           // 5️⃣ Only proceed if quantity > 0
           if (cartItems[items][item] > 0) {
             // 6️⃣ Find the full product object by matching its _id and Clone the product so we don’t mutate original state
             const itemInfo = structuredClone(products.find(product => product._id === items));
             if (itemInfo) {
               // 8️⃣ Attach the size variant and quantity
               itemInfo.size = item;
               itemInfo.quantity = cartItems[items][item];
               // 9️⃣ Push the augmented object into ordersItems
               orderItems.push(itemInfo);
             }
           }
         }
       }
   
       // 🔟 Log the final array to verify correctness
           console.log(ordersItems);
          } catch (error) {
       // 1️⃣1️⃣ Catch and log any unexpected errors
       console.error("Failed to build order items:", error);
     }
   }
   
   
  return (
    <form onSubmit={onSubmitHandler} className="flex flex-col sm:flex-row justify-between gap-4 pt-5 sm:pt-14 min-h-[80vh] border-t">
      {/*-- Left side --*/}
      <div className="flex flex-col gap-4 w-full sm:max-w-[480px]">
        <div className="my-3 text-xl sm:text-2xl">
          <Title text1={'DELIVERY '} text2={'INFORMATION'} />
        </div>

        <div className="flex gap-3">
          <input required onChange={onChangeHandler} name="firstName" value={formData.firstName} className="w-full border border-gray-300 rounded px-3.5 py-1.5" type="text" placeholder="First Name" />
          <input required onChange={onChangeHandler} name="lastName" value={formData.lastName} className="w-full border border-gray-300 rounded px-3.5 py-1.5" type="text" placeholder="Last Name" />
        </div>

        <div className="flex gap-3">
          <input required onChange={onChangeHandler} name="email" value={formData.email} className="w-full border border-gray-300 rounded px-3.5 py-1.5" type="email" placeholder="Email Address" />
          <input required onChange={onChangeHandler} name="street" value={formData.street} className="w-full border border-gray-300 rounded px-3.5 py-1.5" type="text" placeholder="Street" />
        </div>

        <div className="flex gap-3">
          <input required onChange={onChangeHandler} name="city" value={formData.city} className="w-full border border-gray-300 rounded px-3.5 py-1.5" type="text" placeholder="City" />
          <input required onChange={onChangeHandler} name="state" value={formData.state} className="w-full border border-gray-300 rounded px-3.5 py-1.5" type="text" placeholder="State" />
        </div>

        <div className="flex gap-3">
          <input required onChange={onChangeHandler} name="zipCode" value={formData.zipCode} className="w-full border border-gray-300 rounded px-3.5 py-1.5" type="number" placeholder="Zipcode" />
          <input required onChange={onChangeHandler} name="country" value={formData.country} className="w-full border border-gray-300 rounded px-3.5 py-1.5" type="text" placeholder="Country" />
        </div>

        <div className="flex gap-3">
          <input required onChange={onChangeHandler} name="phone" value={formData.phone} className="w-full border border-gray-300 rounded px-3.5 py-1.5" type="tel" placeholder="Phone" />
        </div>
      </div>

      {/*-- Right side --*/}
      <div className="mt-8">
        <div className="min-w-80 mt-8">
          <CartTotal />
        </div>

        <div className="mt-12">
          <Title text1={'PAYMENT'} text2={'METHOD'} />

          {/* Payment Method Selection */}
          <div className="flex flex-col lg:flex-row gap-3">
            <div onClick={() => setMethod('whish')} className="flex items-center gap-3 border p-2 px-3 cursor-pointer">
              <p className={`min-w-3.5 h-3.5 border rounded-full ${method === 'whish' ? 'bg-green-400' : ''}`}></p>
              <img src={assests.which_icon} alt="" className="h-4 mx-4" />
            </div>

            <div onClick={() => setMethod('omt')} className="flex items-center gap-3 border p-2 px-3 cursor-pointer">
              <p className={`min-w-3.5 h-3.5 border rounded-full ${method === 'omt' ? 'bg-green-400' : ''}`}></p>
              <img src={assests.omt_icon} alt="" className="h-4 mx-4" />
            </div>

            <div onClick={() => setMethod('COD')} className="flex items-center gap-3 border p-2 px-3 cursor-pointer">
              <p className={`min-w-3.5 h-3.5 border rounded-full ${method === 'COD' ? 'bg-green-400' : ''}`}></p>
              <p className="mx-4 text-sm font-medium text-gray-500">CASH ON DELIVERY</p>
            </div>
          </div>

          <div className="w-full text-end mt-8">
            <button type='submit' className="px-16 py-3 text-sm bg-black text-white">
              PLACE ORDER
            </button>
          </div>
        </div>
      </div>
    </form>
  )
}

export default Placeorder 

------------------------------------------------------------------------------------------------------------- 
  10 *store the input from user by using onchange to get the user value and name 
  11 * then we do in the placeOrder page we add the logic that when i add to cart somthing and filled the procceds to check out then placing the order so if i open the console log we will see the order details
  12 * now we will send this  items data  that in place order on The API and store them in the ordersData 
  13 * so now if we oppen the orderModel we will see items and amount and adress so we will store the form that we send in the adress object
  14 * and also store the amount and items so we have to send these three items from the request like this -----------------
-----------------------------------------------------------------------------------------------------------------------
  const onSubmitHandler = async (e) => {
     // 1️⃣ Prevent the default form‑submit page reload
     e.preventDefault(); // ← typo fixed from preventDefauly()
   
     try {
       // 2️⃣ Initialize an empty array to collect order items
       let orderItems = [];
   
       // 3️⃣ Loop over each product ID in the cartItems object
       for (const items in cartItems) {
         // 4️⃣ For each size variant under that product
         for (const item in cartItems[items]) {
           // 5️⃣ Only proceed if quantity > 0
           if (cartItems[items][item] > 0) {
             // 6️⃣ Find the full product object by matching its _id and Clone the product so we don’t mutate original state
             const itemInfo = structuredClone(products.find(product => product._id === items));
             if (itemInfo) {
               // 7 Attach the size variant and quantity
               itemInfo.size = item;
               itemInfo.quantity = cartItems[items][item];
               // 8 Push the augmented object into ordersItems
               orderItems.push(itemInfo);
             }
           }
         }
       }
   
       //9 Log the final array to verify correctness
      // console.log(ordersItems);
   
     let orderData = {
          address : formData, // this is like the body in postman but in frontend we add the adress ass like in mongodb and add the dataInformation in adress
          items : orderItems, // orders item that the array that have all the orderitems
          amount : getCartAmount() + delivery_fee, // and we will have the total amount with delivery fee 
     }

     switch (method) { 
          
          // ✅ API CALL FOR COD (CASH ON DELIVERY)
          case 'COD': {
            // 👇 Wrap this block with `{}` to safely use `await` and `const`
            const response = await axios.post(backendUrl + '/api/order/place', orderData,{headers: { token }}); // we send the order data that she have all orders detail and and token 
          //  console.log(response.data.success);
        
            if (response.data.success) {
              toast(response.data.message); // message to the order placing 
              setCartItems({});         // ✅ Clear the cart
              navigate('/orders');      // ✅ Navigate to orders page
            } else {
              toast.error(response.data.message);
            }
        
            break;
          }
        
          default:
            break;
        }
        
     } catch (error) {
       // 1️⃣1️⃣ Catch and log any unexpected errors
       console.error("Failed to build order items:", error);
     }
   }
   
   
  return (
    <form onSubmit={onSubmitHandler} className="flex flex-col sm:flex-row justify-between gap-4 pt-5 sm:pt-14 min-h-[80vh] border-t">
-----------------------------------------------------------------------------------------------------------------------
  15 * so like this we do the API call to send those data to send the orderData but we facing a problem in shopcontext
  16 * that we have to add the setCartItems in the const value to work then if we place an order they will work 
  17 * after that if we fill the form with product that we select and placing order in console log will say true then this order is saved on mongodb and we willcheck that and we will the and orders page with our orders 
  18 * so the placeorder for Cash On delivery Is Perfectly work 
  19 * now in the orders page we will dipslay the order that the user placed for that we will open the backend and(ordercontroller) and we will work on userOrders like this ----------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
//UserOrder to Display the User Order That he Placed In frontend In orders Page
const userOrders = async (req, res) => {
    try {
      // Extract the userId from the request body (sent from the frontend)
      const { userId } = req.body;
  
      // Find all orders in the database that belong to this user
      const orders = await orderModel.find({ userId });
  
      // Send a success response with the list of orders
      res.json({ success: true, orders });
  
    } catch (error) {
      console.log(error);
  
      // Send a failure response with the error message
      res.json({ success: false, message: error.message });
    }
  }
  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
 20 * now we complete the function in backend and like this we bring and display the user from the user ID and this how much The User id Is Import we can do Anything with it 
 21 * now we will display the userOrder in orders page by calling the function API from backend and of course save it in var like this-------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
 import 'react'
import { useContext, useEffect, useState } from 'react'
import { ShopContext } from '../context/ShopContext'
import Title from '../componens/Title'
import axios from 'axios'
const Orders = () => {

  const {backendUrl ,currency,token } = useContext(ShopContext);
  const [orderData,setOrderData] = useState([])

    // to get the orderData from Mongodb and display It in this page
  const loadOrderData = async() => {
      try {
        if (!token) { // if token are not available
          return null
        }

        const response = await axios.post(backendUrl + '/api/order/userorder',{},{headers:{token}}) // when we do somhting for the user we will always send because if he is dosent have a token will not fetch amything
        console.log(response.data);
        
      } catch (error) {
        //
      }
  }

  useEffect(()=>{
     loadOrderData() // this function will be exctuted whenever the token will be updated
  },[token]) // whenever the token will be updated 

  return (
    <div className='border-t pt-16'>
        
        <div className='text-2xl'>

        <Title text1={'MY'} text2={'ORDERS '}/>
        </div>
  
      <div>
        {/*----- here we will display the order data----- */ }
        {
                  orderData.map((item,index)=>(
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
  22 * so as we see we calling the API and we and creating the state variable to save the order data that we get from backend but now we will check if the API call work in console log
  23 * now we will open the console in web page an we will see an object and in this object we have orders that having the orders details
  24 * now after the calling of API work we will store the ordersData in the var that we create to display the order for the user even if we add a new place order it will show and like this we will do it---------------
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------' 
import 'react'
import { useContext, useEffect, useState } from 'react'
import { ShopContext } from '../context/ShopContext'
import Title from '../componens/Title'
import axios from 'axios'
import { toast } from 'react-toastify'
const Orders = () => {

  const {backendUrl ,currency,token } = useContext(ShopContext);
  const [orderData,setOrderData] = useState([])

    // to get the orderData from Mongodb and display It in this page
  const loadOrderData = async() => {
      try {
        if (!token) { // if token are not available
          return null
        }

        const response = await axios.post(backendUrl + '/api/order/userorder',{},{headers:{token}}) // when we do somhting for the user we will always send because if he is dosent have a token will not fetch amything
       // console.log(response.data);
        if (response.data.success) {
          let allOrdersItem = [] // Create an array to collect all items from all orders
          // Loop through each order received from the backend and data.orders if we open the backend and the userorder function we will see a const order that have the logic so we call this const oders here to fetch all orders
          response.data.orders.map((order)=>{  
              // Loop through each item in the curr ent order
            order.items.map((item)=>{
              item['status'] = order.status // bring this item to save it into our var and display each of this items
              item['payment'] = order.payment
              item['paymentMethod'] = order.paymentMethod
              item['date'] = order.date
              allOrdersItem.push(item)           // example for push let fruits = ["apple", "banana"];
            })
          })                                      // fruits.push("orange");  adds "orange" to the end of the array
                                                  // ["apple", "banana", "orange"] 

          setOrderData(allOrdersItem.reverse()); // set the all orders in the var that we create and reverse to display the last item in the first
        }  
      } catch (error) {
        console.log(error);
       
      }
  }

  useEffect(()=>{
     loadOrderData() // this function will be exctuted whenever the token will be updated
  },[token]) // whenever the token will be updated 

  return (
    <div className='border-t pt-16'>
        
        <div className='text-2xl'>

        <Title text1={'MY'} text2={'ORDERS '}/>
        </div>
  
      <div>
        {/*----- here we will display the order data----- */ }
        {
                  orderData.map((item,index)=>(
            <div key={index} className='py-4 border-t border-b text-gray-700 flex flex-col md:flex-row md:items-center md:justify-between gap-4  '>
               <div className='flex items-start gap-6 text-sm '>
                     <img className='w-16 sm:w-20' src={item.image[0]}alt="" />
                     <div>
                      <p className='text-base font-medium '>{item.name}</p>
                      <div className='flex items-center gap-3 mt-1 text-base text-gray-700'>
                        <p className='text-lg'>{currency}{item.price}</p>
                        <p>Quantity: {item.quantity}</p>
                        <p>Size : {item.size}</p>

                      </div>
                      <p className='mt-1'>Date : <span className='text-gray-400'>{new Date(item.date).toDateString()}</span></p>
                      <p className='mt-1'>Payment : <span className='text-gray-400'>{item.paymentMethod}</span></p>
                     </div>
               </div>

               <div className='md:w-1/2 flex justify-between'>
               <div className='flex items-center gap-2'>
                  <p className='min-w-2 h-2 rounded-full bg-green-500'></p>
                  <p className='text-sm md:text-base'>{item.status} </p>
 
               </div>
                   {/*onclick loadorder data that if we change from data base the status to out of stock and click on track order will load the new status */}
                   <button onClick={loadOrderData} className=' border px-4 py-2 text-sm font-medium rounded-sm'>Track Order</button>
               </div>
            </div>
          ))
        }
      </div>
    </div>
    
  )
}

export default Orders

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
  25 * like this we finish the logic of displaying the user Orders we call API of order and loop through every order and every item and select the items that we want to display 
  26 * then we change on frontend the fake dates and quantity that we used to make and add the original one 
  27 * now we finish the logic of display the order data for the user now we will display all order details in Admin pannel

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
//////////////////STEP24 DISPLAY ORDER DETAILS IN ADMIN PANNEL //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   1 * now we will back to the ordercontroller in the backend on  allOrders function and get all the orders details in this function to display it in orders page in admin pannel like thisc-----------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// All orders data for Admin Panel
const allOrders = async (req, res) => {
    try {
      // 'await' is used to wait for the result of an asynchronous operation (a promise)
      // In this case, it waits for orderModel.find({}) to finish fetching all orders from the database
      const orders = await orderModel.find({}); // Get all orders from the database
  
      // Send a JSON response with the list of orders
      res.json({ success: true, orders });
  
    } catch (error) {
      console.log(error);
  
      // If there's an error, send a failure response with the error message
      res.json({ success: false, message: error.message });
    }
  }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 2 * then of course we will go to the admin pannel and calling the API call for the function that we create in backend then we will create a var to store all orders that we get  in backend to the state var that we  to display it now we will open orders page in admin pannel and do this ------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import React from "react";
import { useEffect } from "react";
import { useState } from "react";
import axios from "axios";
import { backendUrl } from "../App";

const Orders = ({ token }) => {
  const [orders, setOrders] = useState([]);

  const fetchAllOrders = async () => {
    if (!token) {
      // if token not available so return null
      return null;
    }

    try {
      const response = await axios.post(backendUrl + "/api/order/list", {}, { headers: { token } }); // emty object before headers because we dont have to send anything in body
      console.log(response.data);
    } catch (error) {
      //
    }
  };

  useEffect(() => {
    fetchAllOrders();
  }, [token]); // whenever the token of admin updated the fetchAllOrders will excuted
  return <div></div>;
};

export default Orders;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 3 * now after we log the response of our backendurl to see if the orders showing in console in inspact if its true and showing the orders then we will store it into the variable that we create and dsiplay the items -------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import React from "react";
import { useEffect } from "react";
import { useState } from "react";
import axios from "axios";
import { backendUrl, currency } from "../App";
import { toast } from "react-toastify";
import { assets } from "../assets/assets";

const Orders = ({ token }) => {
  const [orders, setOrders] = useState([]);

  const fetchAllOrders = async () => {
    if (!token) {
      // if token not available so return null
      return null;
    }

    try {
      const response = await axios.post(backendUrl + "/api/order/list", {}, { headers: { token } }); // emty object before headers because we dont have to send anything in body
      //console.log(response.data);
      if (response.data.success) {
        setOrders(response.data.orders); // in the last .orders this is the var in backend in our allorders function that we create and then  add this orders in set orders
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      toast.error(error.message);
    }
  };

  useEffect(() => {
    fetchAllOrders();
  }, [token]); // whenever the token of admin updated the fetchAllOrders will excuted
  return orders.map((order, index) => {
    return (
      <div key={index} className="bg-white shadow-md rounded-xl p-4 mb-6 border border-gray-200">
        <div className="flex items-start gap-4">
          {/* Icon */}
          <img className="w-10 h-10 mt-1" src={assets.box_icon} alt="order-icon" />
  
          {/* Order Details */}
          <div className="flex-1">
            {/* Items */}
            <div className="mb-2 text-sm text-gray-700">
              {order.items.map((item, index) => {
                if (index === order.items.length - 1) {
                  return (
                    <p key={index}>
                      {item.name} × {item.quantity} <span className="text-xs text-gray-500">({item.size})</span>
                    </p>
                  );
                } else {
                  return (
                    <p key={index}>
                      {item.name} × {item.quantity} <span className="text-xs text-gray-500">({item.size})</span>,
                    </p>
                  );
                }
              })}
            </div>
  
            {/* Address */}
            <div className="text-sm text-gray-600 mb-1">
              <p className="font-medium">{order.address.firstName + " " + order.address.lastName}</p>
              <p>{order.address.street}</p>
              <p>
                {order.address.city}, {order.address.state}, {order.address.country}, {order.address.zipCode}
              </p>
              <p>📞 {order.address.phone}</p>
            </div>
  
            {/* Meta Info */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm mt-2 text-gray-700">
              <p><span className="font-semibold">Items:</span> {order.items.length}</p>
              <p><span className="font-semibold">Method:</span> {order.paymentMethod}</p>
              <p>
                <span className="font-semibold">Payment:</span>{" "}
                <span className={order.payment ? "text-green-600" : "text-red-500"}>
                  {order.payment ? "Done" : "Pending"}
                </span>
              </p>
              <p><span className="font-semibold">Date:</span> {new Date(order.date).toLocaleDateString()}</p>
            </div>
  
            {/* Amount and Status */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mt-4">
              <p className="text-lg font-semibold text-gray-800">
                {currency}{order.amount}
              </p>
  
              <select
                defaultValue={order.status}
                className="mt-2 sm:mt-0 border border-gray-300 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="Order Placed">Order Placed</option>
                <option value="Packing">Packing</option>
                <option value="Shipped">Shipped</option>
                <option value="Out For delivery">Out For delivery</option>
                <option value="Deliverd">Deliverd</option>
              </select>
            </div>
          </div>
        </div>
      </div>
    );
  });
  
};
export default Orders;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  4 * now we finish displaying the orders and the adress and name of the user and we finish the UI disane 
  5 * now we will add the logic for update status that when we select any option it will change the status in data base and in the users orders 
  6 * so we will open the ordercontroller in the backend and work on the update status function like this -----------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const updateStatus = async (req, res) => {
  try {
    // Get the orderId and new status from the request body (sent from the admin panel)
    const { orderId, status } = req.body;

    // Update the status of the order with the matching ID in the database
    await orderModel.findByIdAndUpdate(orderId, { status });

    // Respond with success message
    res.json({ success: true, message: 'Status Updated' });

  } catch (error) {
    console.log(error);

    // If there's an error, respond with a failure message
    res.json({ success: false, message: error.message });
  }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 7 * now we finish the logic of the update status in the backend now we will call the API of this function and connected to admin pannel like this ----------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import React from "react";
import { useEffect } from "react";
import { useState } from "react";
import axios from "axios";
import { backendUrl, currency } from "../App";
import { toast } from "react-toastify";
import { assets } from "../assets/assets";

const Orders = ({ token }) => {
  const [orders, setOrders] = useState([]);

  const fetchAllOrders = async () => {
    if (!token) {
      // if token not available so return null
      return null;
    }

    try {
      const response = await axios.post(backendUrl + "/api/order/list", {}, { headers: { token } }); // emty object before headers because we dont have to send anything in body
      //console.log(response.data);
      if (response.data.success) {
        setOrders(response.data.orders); // in the last .orders this is the var in backend in our allorders function that we create and then  add this orders in set orders
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      toast.error(error.message);
    }
  };

  const statusHandler = async(event,orderId)=>{
       try {                                                                     //status: event.target.value means:Get the selected value from the dropdown (event.target.value) And send it as the new status in the body. ✅ Example: { orderId: "abc123", status: "Shipped" }
        const response = await axios.post(backendUrl + '/api/order/status',{orderId,status:event.target.value},{headers:{token}}) // passing token of admin because only admin can change status
        if (response.data.success) {                                       // 2Request body (data sent to the backend)
          await fetchAllOrders() // if change status true we will call this function to update it 
        }
       } catch (error) {                                                  
          console.log(error);
          // eslint-disable-next-line no-undef
          toast.error(response.data.message)
        
       }
  }

  useEffect(() => {
    fetchAllOrders();
  }, [token]); // whenever the token of admin updated the fetchAllOrders will excuted

  return orders.map((order, index) => {
    return (
      <div key={index} className="bg-white shadow-md rounded-xl p-4 mb-6 border border-gray-200">
        <div className="flex items-start gap-4">
          {/* Icon */} 
          <img className="w-10 h-10 mt-1" src={assets.box_icon} alt="order-icon" />
  
          {/* Order Details */}
          <div className="flex-1">
            {/* Items */}
            <div className="mb-2 text-sm text-gray-700">
              {order.items.map((item, index) => {
                if (index === order.items.length - 1) {
                  return (
                    <p key={index}>
                      {item.name} × {item.quantity} <span className="text-xs text-gray-500">({item.size})</span>
                    </p>
                  );
                } else {
                  return (
                    <p key={index}>
                      {item.name} × {item.quantity} <span className="text-xs text-gray-500">({item.size})</span>,
                    </p>
                  );
                }
              })}
            </div>
  
            {/* Address */}
            <div className="text-sm text-gray-600 mb-1">
              <p className="text-[22px] text-red-600">{order.address.firstName + " " + order.address.lastName}</p>
              <p><span className="font-semibold">Country:</span> {order.address.country}</p>
              <p><span className="font-semibold">State:</span> {order.address.state}</p>
              <p><span className="font-semibold">City:</span> {order.address.city}</p>
              <p><span className="font-semibold">Street:</span> {order.address.street}</p>
              <p><span className="font-semibold">Zip Code:</span> {order.address.zipCode}</p>
              <p><span className="font-semibold">📞 Phone:</span> {order.address.phone}</p>
              <p><span className="font-semibold">Email:</span> {order.address.email}</p>
            </div>
  
            {/* Meta Info */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-sm mt-2 text-gray-700">
              <p><span className="font-semibold">Items:</span> {order.items.length}</p>
              <p><span className="font-semibold">Method:</span> {order.paymentMethod}</p>
              <p>
                <span className="font-semibold">Payment:</span>{" "}
                <span className={order.payment ? "text-green-600" : "text-red-500"}>
                  {order.payment ? "Done" : "Pending"}
                </span>
              </p>
              <p><span className="font-semibold">Date:</span> {new Date(order.date).toLocaleDateString()}</p>
            </div>
  
            {/* Amount and Status */}
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mt-4">
              <p className="text-lg font-semibold text-gray-800">
                {currency}{order.amount}
              </p>
  
              <select
                defaultValue={order.status} onChange={(event)=>statusHandler(event,order._id)}
                className="mt-2 sm:mt-0 border border-gray-300 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="Order Placed">Order Placed</option>
                <option value="Packing">Packing</option>
                <option value="Shipped">Shipped</option>
                <option value="Out For delivery">Out For delivery</option>
                <option value="Deliverd">Deliverd</option>
              </select>
            </div>
          </div>
        </div>
      </div>
    );
  });
  
};
export default Orders;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  8 * now the logic of updating the state and if we update the state of the orders it will change in data base and in userorder 
  9 * now we will create the credit cart cash payment method to add the credit cartpayment but in lebanon this right not not included
  10 * so like this we can say we finsih our website and if we want to update somthing in design we can do of course 

1 NEXT STEP THAT I WANT TO ADD THE LOGIC FOR FORGOT PASSWPORD
2 THE OTHER STEP THAT I WANT TO ADD NOTIFCATE TO THE ADMIN SO IF ANY ORDERS COME IT WILL NOTIFICATE
3 THE OTHER STEP THAT I WANT ALSO NOTIFCATE THE USER THAT IF I CHANGE THE STATUS FROM ADMIN IT WILL TELL THEM 

///////////////////////////////////DEPLOY ON SERVER//////////////////////////////////////////////
******NOTTEEE If we get any error in render that because the bycrypt package we will 
npm install bycryptjs and then we will change all the import in backend files to import bycryptjs


************notte for frontend 
install the package of react toastify because we dont have it in frontend and we use it in the app.jsx
then we will fix this also in app.jsx in frontend import Product from './pages/Product' and all the import for this -----
=============================================================================================================================
import 'react'
import {Route,Routes } from 'react-router-dom'
import About from  './pages/About'
import Product from './pages/Product'
import Cart from './pages/Cart'
import Login from './pages/Login'
import Placeorder from './pages/Placeorder'
import Orders from './pages/Orders' 
import Navbar from './componens/Navbar'
import Home from './pages/Home'
import Footer from './componens/Footer'
import Collection from './pages/Collection'
import Contact from './pages/Contact'
import SearchBar from './componens/SearchBar'
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
=============================================================================================================================
then we will open the hom jsx and fix this 
------------------------------------------
import Hero from '../componens/Hero'
=============================================================================================================================
   after we fix thatt itss completlyy workk 

then we will deploy the admin and the admins deploying is perfectly workkk!!!!
now we having a problem that is when i refresh the page it will gone that because we using react router dom to fix that
1 * we have to rewrites we open the rewrites in our sites that deploy and do this'
2 * source : /*
    destiniton : /index.html
    action : rewrites 
we will do this for both of frontend and admin pannel 
and like this our deploy page is perfectly workkk on server render 
=============================================================================================================================
//////////////////////////////FIX THE ISSU ON OUR WEBSITE AFTER WE TEST //////////////////////////////////////
  1 * first issue that is if the orders get so much in our data base we will add the logic that we can remove the order from admin 
  2 * when we open single product and refresh the page the singleProduct will be gone to fix that we will ope product page and do this  -------------------------------
-------------------------------------------------------------------------------------------------------------------------------------
 useEffect(() => {
    fetchProductData(); // Run this function when component loads
  }, [productId,products]);
-------------------------------------------------------------------------------------------------------------------------------------
 3 * like this we fix the refresh issue then we will fix the icon of the user and cart shop because if we in dark mode it will be gone so we will add it again -------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
so we fix the profile icon and the bin icon and we change the hero image and the logo and the 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 4 *When I click a related product, I want the page to scroll to top — not stay scrolled down inside "Related Products" — so the new product shows properly at the top.Solution: in product.jsx----------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 useEffect(() => {
    fetchProductData(); // Run this function when component loads
    window.scrollTo({ top: 0, behavior: 'smooth' });   // when open the related products scroll to top smoothly
  }, [productId,products]);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 5 * i want that when i add to cart an item some pro effect will happen so the user will know this cart will change like this  in (product.jsx) page--------------
------------------------------------------------------------------------------------------------------------------------------ 
 const [clicked, setClicked] = useState(false); first create clicked to handle the click 

  // function to the add to cart the product data with size with animation
const handleAddToCart = () => {
  addToCart(productData._id, Size);
  setClicked(true); onclick set it true 
  setTimeout(() => setClicked(false), 500); // Reset after 0.5s
};

  <button onClick={handleAddToCart} className={`bg-black text-white px-8 py-3 active:bg-gray-700 transition-transform duration-300 ${clicked ? 'scale-110' : ''}`}>ADD TO CART</button>
------------------------------------------------------------------------------------------------------------------------------
 6 * like this we fix the animation for this add to cart  
 7 * now we will the the animation that when i click on the cart it will show some animation like this in (Navbar.jsx) page---------------------
 ------------------------------------------------------------------------------------------------------------------------------
 // eslint-disable-next-line no-unused-vars
import React, { useContext, useState } from 'react'
import {assests} from '../assets/assests'
import {Link, NavLink} from 'react-router-dom'
import { ShopContext } from '../context/ShopContext';

const Navbar = () => {
      
   const [visible,setVisible] = useState(false); {/*this for the menu bar icon */ }
   const {setShowSearch,getCartCount,navigate,token,setToken,setCartItems} = useContext(ShopContext);
   const [animate, setAnimate] = useState(false);

   const logout = ()=>{
    navigate('/login')
    localStorage.removeItem('token') // we will remove the token from the local storage when he logout
    setToken('') // clearing the token
    setCartItems({})// clearing the cart items
   }

   // this function when i clicked it will navigate me mean redirect me to the cart page  and it will add some animation when i click on cart icon
   const handleClick = () => {
    setAnimate(true);
    setTimeout(() => {setAnimate(false); 
    navigate('/cart'); // Navigate after animation
    }, 400); // 0.4 seconds
  };
  return (


                 {/* //////////////////////add to cart ////////////////////// */ }
                 <div className="relative cursor-pointer" onClick={handleClick}>
               <img src={assests.shoppping_icon} className={`w-[20px] min-w-4 transition-transform duration-300 ${animate ? 'scale-125 rotate-12' : '' }`} alt=""></img>
               <p className="absolute right-[-5px] bottom-[-5px] w-4 text-center leading-4 bg-black text-white aspect-square rounded-full text-[8px]">{getCartCount()}</p>
                      </div>
------------------------------------------------------------------------------------------------------------------------------
 8 *  that is the change that i make for the animation to te carts page i can update the change in Navbar(.jsx)
 9 *  then we will make the linked page that when i clieck on page and go to another page it will so som animation so we will do this -------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------
import 'react'
import {Route,Routes,useLocation  } from 'react-router-dom'
import About from  './pages/About'
import Product from './pages/Product'
import Cart from './pages/Cart'
import Login from './pages/Login'
import Placeorder from './pages/Placeorder'
import Orders from './pages/Orders' 
import Navbar from './componens/Navbar'
import Home from './pages/Home'
import Footer from './componens/Footer'
import Collection from './pages/Collection'
import Contact from './pages/Contact'
import SearchBar from './componens/SearchBar'
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useEffect, useState } from 'react';

{/*dyman lzm khali awl esm bl file capital*/}
const App = () => {

  const location = useLocation();
  const [fade, setFade] = useState(false);

  // this an effect that when we open any linked page it will show some effects 
  useEffect(() => {
    setFade(true);
    const timeout = setTimeout(() => {
      setFade(false);
    }, 150); // Small delay
    return () => clearTimeout(timeout);
  }, [location.pathname]);


  return (         
  <div className= {`px-4 sm:px-[5vw] md:px-[7vw] lg:px-[9vw] transition-all  ${fade ? 'opacity-0 translate-y-2' : 'opacity-100 translate-y-0'}`}>  {/*this an edit for the view on the mobile and all screens with effect and animation for all links pages */}
----------------------------------------------------------------------------------------------------------------------------------------------------
 10 * so now if we scroll for page to another it will be soo smooth then we will add this to index.css -----------
----------------------------------------------------------------------------------------------------------
html {
  scroll-behavior: smooth;
}
----------------------------------------------------------------------------------------------------------

   11 * now we finish adding the animation now we will remove the onclick on the wish method or omt method we will make this edit we will open the PlaceOrder page and do this-----
----------------------------------------------------------------------------------------------------------
<div className="flex flex-col lg:flex-row gap-3">
            <div  className="flex items-center gap-3 border p-2 px-3 cursor-pointer">
              <p className={`min-w-3.5 h-3.5 border rounded-full ${method === 'whish' ? 'bg-green-400' : ''}`}></p>
              <p className="mx-4 text-sm font-medium text-gray-500">Call us To Pay</p>
              <img src={assests.which_icon} alt="" className="h-6 mx-7" />
            </div>

            <div  className="flex items-center gap-3 border p-2 px-3 cursor-pointer">
              <p className={`min-w-3.5 h-3.5 border rounded-full ${method === 'omt' ? 'bg-green-400' : ''}`}></p>
              <p className="mx-4 text-sm font-medium text-gray-500">Call us To Pay</p>
              <img src={assests.omt_icon} alt="" className="h-4 mx-7" />
            </div>
----------------------------------------------------------------------------------------------------------
13 * then we will change the admins response to the orders to words more clear like this in admin and in (Order.jsx) ----------------
----------------------------------------------------------------------------------------------------
 <select
                defaultValue={order.status} onChange={(event)=>statusHandler(event,order._id)}
                className="mt-2 sm:mt-0 border border-gray-300 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="Your Order Placed">Your Order Placed</option>
                <option value="We Recived Your Order"> We Recived Your Order</option>
                <option value="your order will Be deliverd Soon">Your Order Will Be Deliverd Soon</option>
                <option value="Your order Is out of stock">Out Of Stock</option>
                <option value=" Your order is Deliverd">Your  Order Is Deliverd</option>
              </select>
            </div>
          </div>
        </div>
      </div>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------
1 NEXT STEP THAT I WANT TO ADD THE LOGIC FOR FORGOT PASSWPORD
2 THE OTHER STEP THAT I WANT TO ADD NOTIFCATE TO THE ADMIN SO IF ANY ORDERS COME IT WILL NOTIFICATE
3 THE OTHER STEP THAT I WANT ALSO NOTIFCATE THE USER THAT IF I CHANGE THE STATUS FROM ADMIN IT WILL TELL THEM 

///////////////////////////////STEP25 ADD NOTIFICATION ON OUR GMAIL WHENEVER ORDERS UPDATED ////////////////////////////////////////////////
   1 First we want to install those  2 package in our backend folder (npm install mongodb nodemailer) then we will create a new files inside the cntrollers with the name (adminNotifer.js)and add the logic for that like this ---------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
